[Chapter 16. The Java Memory Model]

(16.1. What is a Memory Model, and Why would I Want One?)
	<16.1.1. Platform Memory Models>
		- In a shared-memory multiprocessor architecture, each processor has its own cache that is periodically reconciled with main memory.

		- "Sequential Consistency" (single order in which the oeprations happen in a program)
			-> no modern multiprocessor offers sequential consistency and the JMM does not either.

	<16.1.2. Reordering>
		- reordering at the memory level can make programs behave unexpectedly.

		- Synchronization inhibits the compiler, runtime, and hardware from reordering memory operations in ways that would violate the visibility guarantees provided by the JMM.

	<16.1.3. The Java Memory Model in 500 Words or Less>
		- The rules for happens-before are:
			1) Program order rule
				-> Each action in a thread happens-before every action in that thread that comes later in the program order.

			2) Monitor lock rule
				-> An unlock on a monitor lock happens-before every subsequent lock on that same monitor lock.

			3) Volatile variable rule
				-> A write to a volatile field happens-before every subsequent read of that same field.

			4) Thread start rule.
				-> A call to Thread.start on a thread happens-before every action in the started thread.

			5) Thread termination rule.
				-> Any action in a thread happens-before any other thread detects that thread has terminated, either by successfully return from Thread.join or by Thread.isAlive returning false.

			6) Interruption rule.
				-> A thread calling interrupt on another thread happens-before the interrupted thread detects the interrupt (either by having InterruptedException thrown, or invoking isInterrupted or interrupted)

			7) Finalizer rule.
				-> The end of a constructor for an object happens before the start of the finalizer for that object.

			8) Transitivity
				-> If A happens-before B, and B happens-before C, then A happens-before C.


	<16.1.4. Piggybacking on Synchronization>
		- safe publication using a BlockingQueue is a form of piggybcking.
			-> One thread putting an object on a queue and another thread subsequently retrieving it constitutes safe publication because there is guaranteed to be sufficient internal synchronization in a BlockingQueue implementation to ensure that the enqueue happens-before the dequeue.

(16.2. Publication)

	<16.2.1. Unsafe Publication>		
		ex) Unsafe Lazy Initialization. Don't Do this
			========================================================================
			@NotThreadSafe
			public class UnsafeLazyInitialization {
				private static Resource resource;

				public static Resource getInstance() {
					if(resource == null)
						resource = new Resource(); // unsafe publication
					return resource;
				}
			}
			========================================================================

	<16.2.2. Safe publication>
		- published object is visible to other threads because they ensure the publication happens-before the consuming thread loads a reference to the published object.
			ex) BlockingQueue
				-> implementations have sufficient internal synchronization to ensure that the "put" happens-before the "take".

			ex) using a shared variable guarded by a lock or a shared volatile variable
				-> ensures that reads and writes of that variable are ordered by happens-before.

	<16.2.3. Safe Initialization Idioms>
		ex) Thread-safe Lazy Initialization
			========================================================================
			@ThreadSafe
			public class SafeLazyInitialization {
				private static Resource resource;

				public syncrhonized static Resource getInstance() {
					if (resource == null)
						resource = new Resource();p
					return resource;
				}
			}
			========================================================================

		ex) Eager Initialization
			========================================================================
			@ThreadSafe
			public class EagerInitialization {
				private static Resource resource = new Resource();

				public static Resource getResource() { return resource; }
			}
			========================================================================
			-> eliminates the synchronization cost incurred on each call to getInstance in SafeLazyInitialization.

			-> static initializer : no additional synchronization is needed.

		ex) Lazy Initialization Holder Class idiom
			========================================================================
			@ThreadSafe
			public class ResourceFactory {
				private static class ResourceHolder {
					public static Resource resource = new Resource();
				}

				public static Resource getResource() {
					return ResourceHolder.resource;
				}
			}
			========================================================================

	<16.2.4. Double-checked Locking>
		- Anti Pattern.

		ex) Double-checked-locking Anti-pattern. Don't do this.
			========================================================================
			@NotThreadSafe
			public class DoubleCheckedLocking {
				private static Resource resource;

				public static Resource getInstance() {
					if(resource == null) {
						synchronized (DoubleCheckedLocking.class) {
							if(resource == null)
								resource = new Resource();
						}
					}
					return resource;
				}
			}
			========================================================================
			1) Thread A notices that the value is not initialized, and obtains the lock and begins to initialize the resource.

			2) Due to the semantics of some programming languages, the code generated bythe compiler is allowed to update the shared variable to pointo a "partially constructed object" before A has completed the initialization.

			3) Thread B notices that the shared variable has been initialized, and returns the resource. Because thread B believes that the resource is already initialized, it does not acquire the lock.
				-> If B uses the resource before all of the initialization done by A is seen by B, the program will likely crash.

		* For values rechable through non-final fields, or values that may change after construction, you must use synchronization to ensure visibility.

