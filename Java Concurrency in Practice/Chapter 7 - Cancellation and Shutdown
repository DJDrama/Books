[Chapter 7 - Cancellation and Shutdown]
	
	- Java does not provide any mechanism for safely forcing a thread to stop what it is doing.
		-> It provides "interruption", a cooperative mechanism that lets one thread ask another to stop what it is doing.

(7.1. Task Cancellation)
	- number of reasons why you might want to cancel an activity
		1) User-requested cancelltation

		2) Time-limited activities

		3) Application events

		4) Errors

		5) Shutdown

	* There is no safe way to preemptively stop a thread in Java.

	- There are only cooperative mechanisms
		1) setting a "cancellation requested" flag that the task checks periodically;
			
			ex) "Volatile" field to hold Cancellation State.
				========================================================================
				public class PrimeGenerator implements Runnable {
					private final List<BigInteger> primes
							= new ArrayList<BigInteger>();
					private volatile boolean cancelled;

					public void run() {
						BigInteger p = BigInteger.ONE;
						while (!cancelled) {
							p = p.nextProbablePrime();
							syncrhonized (this) {
								primes.add(p);
							}
						}
					}

					public void cancel() {
						cancelled = true;
					}

					public synchronized List<BigInteger> get() {
						return new ArrayList<BigInteger>(primes);
					}
				}
				========================================================================

	<7.1.1. Interruption>
		
		- Each thread has a boolean interrupted status
			-> interrupting a thread sets its interrupted status to "true".

		- Thread contains methods for interrupting a thread and querying the interrupted status of a thread.
			ex)
				===================================================================
				public class Thread {
					// interrupts the target thread
					public void interrupt() { ... }

					// returns the interrupted status fo the target thread.
					public boolean isInterrupted() { ... }

					// clears the interrupted status of the current thread
					// and returns its "previous" value
					// only way to clear the interrupted status.
					public static boolean interrupted() { ... }

					// ...
				}
				===================================================================

		- Blocking library like "Thread.sleep" and "Object.wait" try to detect when a thread has been interrupted and return early.
			-> they respond to interruption by clearing the interrupted status and throwing "InterruptedException". (Indicating that the blocking operation completed early due to interruption.)

			* JVM makes no guarantees on how quickly a blocking method will detect interruption.
				-> BUT! in practice this happends reasonably quickly.

		- If a thread is interrupted when it is not blocked, its interrupted status is set.
			-> and it is up to the activity being cancelled to poll the interrupted status to detect interruption.

			* "Sticky" interruption.
				-> if it doesn't trigger an "InterruptedException"
				-> evidence of iterruption persists until someone deliberately clears the interrupted status.

		* Calling "interrupt" does not necessarily stop the target thread from doing what it is doing;
			-> It merely delivers the message that interruption has been requested.

		- Interruption does not actually interrupt a running thread.
			-> just requests that the thread interrupt itself at the next convenient opportunity. (These opportunities are called cancellation points.)

			-> methods such as "wait", "sleep", and "join" take such requests seriously.
				+ throwing an exception when they receive an interrupt request or encounter an already set interrupt status upon entry.


		- [static boolean interrupted()]
			-> Use with caution. (it clears the current thread's interrupted status.)

		* Interruption is the most "sensible" way to implement cancellation.

			ex) Using Interruption for Cancellation
				===================================================================
				class PrimeProducer extends Thread {
					private final BlockingQueue<BigInteger> queue;

					PrimeProducer(BlockingQueue<BigInteger> queue) {
						this.queue = queue;
					}

					public void run() {
						try {
							BigInteger p = BigInteger.ONE;
							while (!Thread.currentThread().isInterrupted()) {
								queue.put(p = p.nextProbablePrime());
							}
						} catch (InterruptedException consumed) {
							/* Allow thread to exit */
						}
					}

					public void cancel() { interrupt(); }
				}
				===================================================================

	<7.1.2. Interruption Policies>
		- sensible interruption policy
			-> thread-level cancellation
			-> service-level cancellation

			+ exit as quickly as practical, cleaning up if necessary, possibly notifying some owning entity that the thread is exiting.

		- Tasks do not execute in threads they own
			-> they borrow threads owned by a service such as thread pool.

		- "InterruptedException"
			-> get out of the way as quickly as possible and communicate the interruption back to the caller so that code higher up on the call stack can take further action.

		- A task need not necessarily drop everything when it detects an interruption request.
			-> can choose to postpone
			-> finishing the task it was performing, and then thrwoing "InterruptedException"
			-> or otherwise indicating interruption.

			+ this techinque can protect data structures from corruption when an activity is interrupted in the middle of an update.

	<7.1.3. Responding to Interruption>
		- interruptible blocking method such as
			-> "Thread.sleep"
			-> "BlockingQueue.put"

			+ two practical strategies for handling "InterruptedException"
				1) propgate the exception, making your method an interruptible blocking method, too
					-> add "InterruptedException" to the throws clause

						ex)
							==============================================================
							BlockingQueue<Task> queue;
							...
							public Task getNewTask() throws InterruptedException {
								return queue.take();
							}
							==============================================================


				2) restore the interruption status so that code higher up on the call stack can deal with it.
					-> standard way: restore the interrupted status by calling "interrupt" again.

					* should not do : catching "InterruptedException" and doing nothing in the "catch" block, unless your code is actually implementing the interruption policy for a thread.


		* Only code that implements a thread's interruption policy may swallow an interruption request.
			-> General-purpose task and library code should never swallow interruption requests.

			ex)
				==============================================================
				public Task getNextTask(BlockingQueue<Task> queue) {
					boolean interrupted = false;
					try {
						while(true) {
							try{
								return queue.take();
							} catch (InterruptedException e) {
								interrupted = true;
								// fall through and retry
							}
						}
					} finally {
						if(interrupted)
							Thread.currentThread().interrupt();
					}
				}
				==============================================================
	<7.1.5. Cancellation via "Future">
		- "Future" has a cancel method that takes a boolean argument, "mayInterruptingIfRunning", and returns a value indicating whether the cancellation attempt was successful.

			ex)
				==============================================================
				public static void timedRun(Runnable r,
											long timeout,
											TimeUnit unit)
											throws InterruptedException {
					Future<?> task = taskExec.submit(r);
					try {
						task.get(timeout, unit);
					} catch (TimeoutException e) {
						// task will be cancelled below
					} catch (ExecutionException e) {
						// exception thrown in task; rethrow
						throw launderThrowable(e.getCause());
					} finally {
						// Harmless if task already completed
						task.cancel(true); // interrupt if running
					}
				}
				==============================================================
				* When "Future.get" throws "InterruptedException" or "TimeoutException" and you know that the result is no longer needed by the program
					-> cancel the task with "Future.cancel"

	<7.1.6. Dealing with Non-interruptible Blocking>
		- not all blocking methods or blocking mechanisms are responsive to interruption.
			-> If a thread is blocked performing syncrhonous socket I/O or waiting to acquire an intrinsic lock, interruption has no effect other than setting the thread's interrupted status.

		- "read" and "write" in "InputStream" and "OutputStream" are not responsive to Interruption.
			-> BUT closing the underlying socket makes any threads blocked in "read" or "Write" throw a "SocketException".


	<7.1.7. Encapsulating Nonstandard Cancellation with "Newtaskfor">
		- "newTaskFor" hook is a factory method that creates the "Future" representing the task.
			-> returns a RunnableFuture, an interface that extends both "Future" and "Runnable" (and is implemented by FutureTask).

		- Customizing the task "Future" allows you to override "Future.cancel"
			-> can perform logging
			-> gather statistics on cancellation
			-> cancel activities that are not responsive to interruption.

(7.2. Stopping a Thread-based Service)
	
	<7.2.3. Poison Pills>
		- "posion pill"
			-> reconizable object placed on the queue that means "when you get this, stop"

		- producers should not submit any work after putting a poison pill on the queue.

		- "poison pills" work only when the number of producers and consumers is known.

		- "Poson pills" work reliably only with unbounded queues.

			ex) Producer Thread for IndexingService
				==============================================================
				public class CrawlerThread extends Thread {
					public void run(){
						try {
							crawl(root);
						} catch (InterruptedException e) { /* fall through */ }
						finally {
							while(true) {
								try {
									queue.put(POISON);
									break;
								} catch (InterruptedException e1) { /* retry */ }
							}
						}
					}

					private void crawl(File root) throws InterruptedException {
						...
					}
				}
				==============================================================

			ex) Consumer Thread for IndexingService
				==============================================================
				public class IndexerThread extends Thread {
					public void run() {
						try {
							while(true) {
								File file = queue.take();
								if (file == POISON)	break;
								else
									indexFile(file);
							}
						} catch (InterruptedException consumed) { }
					}
				}
				==============================================================

	<7.2.5. Limitations of "Shuddownnow">
		- when an "ExecutorService" is shut down abruptly with "shutdownNow"
			-> attempts to cancel the tasks currently in progress and returns a list of tasks that were submitted but never started so that they can be logged or saved for later processing.

			* The "Runnalbe" objects returned by "shutdownNow" might not be the same objects that were submitted to the ExecutorService
				-> they might be wrapped instances of the submitted tasks.

			* HOWEVER!
				-> no general way to find out which tasks started but did not complete.
				-> no way of knowing the state of the tasks in progress at shutdown time unless the tasks temselves perform some sort of checkpointing.

(7.3. Handling Abnormal Thread Termination)
	<7.3.1. Uncaught Exception Handlers>
		- When a thread exits due to an uncaught exception
			-> the JVM reports this event to an application-provided "UncaughtExceptionHandler"
			-> if not handler exists, the default behavior is to print the stack trace to "System.err".

				ex)	"UncaughtExceptionHandler" interface
					==============================================================
					public interface UncaughtExceptionHandler {
						void uncaughtException(Thread t, Throwable e);
					}
					==============================================================

				ex) "UncaughtExceptionHandler" that Logs the Exception
					====================================================================
					public class UEHLogger implements Thread.UncaughtExceptionHandler {
						public void uncaughtException(Thread t, Throwable e) {
							Logger logger = Logger.getAnonymousLogger();
							logger.log(Level.SEVERE,
								"Thread terminated with exception: " + t.getName(),
								e);
						}
					}
					====================================================================

		* In long-running applications, always use uncaught exception handlers for all threads that at least log the exception.
			-> provide a "ThreadFactory" to the "ThreadPoolExecutor" constructor.

(7.4. JVM Shutdown)
	- The JVM can shut down in either an "orderly" or "abrupt" manner.
		1) "orderly shutdown"
			-> initiated when the last "normal"(non-daemon) thread terminates
			-> someone calss "System.exit"
			-> or by other platform-specific means (such as sending a SIGINT or hitting Ctrl-C).

		2) "abruptly"
			-> by calling "Runtime.halt"
			-> or by killing the JVM process through the operating system (such as sending a SIGKILL).

	<7.4.1. Shutdown Hooks>
		- In an "orderly" shutdown
			-> the JVM first starts all registered shutdown hooks.
			-> "Shutdown" hooks are unstarted threads that are registered with "Runtime.addShutdownHook".

			* if any application threads are still running at shutdown time, they continue to run concurrently with the shutdown process.
				-> when all shutdown hooks have completed, the JVM may choose to run finalizers if "runFinalizersOnExit" is true, and then halts.

			* If the shutdown hooks or finalizers don't complete, then the orderly shutdown process "hangs" and the JVM must be shut down abruptly.
				-> the JVM is not required to do anything other than halt the JVM; shutdown hooks will not return.

		- "Shutdown hooks" should be thread-safe
			-> they must use syncrhonization when accessing shared data and should be careful to avoid deadlock, just like any other concurrent code.

			-> they should not make assumptions about the state of the application
				+ such as whether other services have shut down already or all normal threads have completed.
				+ or about why the JVM is shutting down, and must therefore be coded extremely defensively.

			-> they should exit as quickly as possible, since their existence delays JVM termination at a time when the user may be expecting the JVM to terminate quickly.


		- "Shutdown hooks" can be used for service or application cleanup, such as deleting temporary files or cleaning up resources that are not automatically cleaned up by the Operating System.

			ex) Registering a Shutdown Hook to Stop the Logging Service.
				====================================================================
				public void start() {
					Runtime.getRuntime().addShutdownHook(new Thread() {
						public void run() {
							try { LogService.this.stop(); }
							catch (InterruptedException ignored) {}
						}
					});
				}
				====================================================================

		- "Shutdown hooks" all run concurrently, closing the log file could cause trouble for other shutdown hooks who want to use the logger.
			* "Shutdown hooks" should not rely on services that can be shut down by the application or other shutdown hooks.

			-> One way to accomplish this is to use a "single shutdown hook" for all services.
				+ ensures that shutdown actions execute sequentially in a single thread
				+ avoiding the possibility of race conditions or deadlock between shutdown actions.

	<7.4.2. Daemon Threads>
		- "Daemon Threads"
			-> sometimes you want to create a thread that performs some helper function but don't want the exsitence of this thread to prevent the JVM from shutting down.

		- Threads are divided into two types
			1) normal threads
				-> by default any threads created by the main thread are normal threads.

			2) daemon threads
				-> ex) Garbage collector
				-> ex) Housekeeping threads

		- the JVM performs an inventory of running threads, and if the only threads that are left are "daemon threads"
			-> initiates an "orderly" shutdown.

		- When the JVM halts, any remaining daemon threads are abandoned 
			-> "finally" blocks are not executed
			-> stacks are not unwound - the JVM just exits.

		- It is dangerous to use daemon threads for tasks that might perform any sort of "I/O".

		* Daemon threads are best saved for "housekeeping" tasks
			-> such as background thread that periodically removes expired entries from an in-memory cache.

		* "Daemon threads" are not a good substitue for properly managing the lifecycle of services within an application.

	<7.4.3. Finalizers>
		* Some resources such as "file" or "socket handlers" must be explicitly returned to the operating system when no longer needed.
			-> the garbage collector treats objects that have a nontrivial "finalize" method specially: after they are reclaimed by the collector, "finalize" is called so that persistent resources can be released.

		* "finalizers" can run in a thread managed by the JVM
			-> any state accessed by a finalizer will be accessed by more than one thread
			-> MUST be accessed with syncrhonization.

		* "finalizers" offer no guarantees on when or even if they run, and they impose a significant performance cost on objects with nontrivial finalizers.
		
		* In most cases, the combination of "finally" blocks and explicit "close" methods does a better job of resource management than "finalizers"
			-> sole exception is when you need to manage objects that hold resources acquired by native methods.

		* Work hard to avoid writing or using classes with "finalizers".
	
