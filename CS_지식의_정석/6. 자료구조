[자료구조]
	- 효율적으로 데이터를 관리하고 수정, 삭제, 탐색, 저장할 수 있는 데이터 집합.

	- 빅오표기법, 시간복잡도와 공간복잡도
		- Big-O notation: 가장 영향을 많이 끼치는 높은 승수를 가진
		- 공간 복잡도: 필요로 하는 자원 공간의 양
		- 시간 복잡도: 문제를 해결하는 데 걸리는 시간과 입력의 함수 관계

	- 연결리스트와 배열의 차이
		- 연결리스트
			- 삽입: O(1)
			- 삭제: O(1)
			- 탐색: O(n)
		- 배열
			- 삽입: O(n)
			- 삭제: O(n)
			- 탐색: O(1) (랜덤 접근)

		* 데이터 추가 삭제가 많을 경우 연결리스트로, 탐색이 많을 경우 배열로.

	- Stack vs Queue
		- Stack
			- LIFO(Last In First Out)
			- 삽입: O(1)
			- 삭제: O(1)
			- 탐색: O(n)
			- 재귀 함수, DFS에 사용되며 웹 브라우저 방문 기록 등에 사용됨.
		- Queue
			- FIFO(First In First Out)
			- 삽입: O(1)
			- 삭제: O(1)
			- 탐색: O(n)
			- CPU 작업을 기다리는 프로세스, 스레드 행렬 또는 네트워크 접속을 기다리는 행렬, BFS, 캐시 등에 사용됨.

	- Graph vs Tree, BST
		- Graph
			- 정점과 간선으로 이루어진 자료 구조
		- Tree
			- 정점과 간선으로 이루어져 있음.
			- 트리 구조로 배열된 일종의 계층적 데이터의 집합
			(특징)
				1. 부모, 자식 계층 구조를 가짐
				2. V-1=E 라는 특징(간선 수는 노드 수 - 1)
				3. 임의의 두 노드 사이의 경로는 '유일무이'하게 '존재'(트리 내의 어떤 노드와 어떤 노드까지의 경로는 반드시 존재)

		- BST(이진 탐색 트리)
			- 노드의 오른쪽 하위 트리에는 '노드 값보다 큰 값'이 있는 노드만 포함
			- 왼쪽 하위 트리에는 '노드 값보다 작은 값'이 들어있는 트리

	- 균형잡힌 트리: AVL Tree, Red Black Tree
		- AVL(Adelson-Velsky and Landis) Tree
			- 균형을 맞추기 위해 트리 일부를 왼쪽 혹은 오른쪽으로 회전시키며 균형을 잡음.
		- Red Black Tree
			- '모든 리프 노드와 루트 노드는 블랙이고 어떤 노드가 레드이면 그 노드의 자식은 반드시 블랙'이다 라는 특징을 가짐.

	- 해시테이블
		- 무한에 가까운 데이터들을 유한한 개수의 해시 값으로 매핑한 테이블
		- 삽입: O(1)
		- 삭제: O(1)
		* 최악의 경우 O(n) 시간 복잡도 발생 가능.
			- 해시: 다양한 길이를 가진 데이터를 고정된 길이를 가진 데이터로 매핑(Mapping) 한 값.
			- 해싱: 임의의 데이터를 해시로 바꿔주는 일이며 해시 함수가 이를 담당
			- 해시 함수: 임의의 데이터를 입력으로 받아 일정한 길이의 데이터로 바꿔주는 함수
			


