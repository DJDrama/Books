[네트워크]
	1. 네트워크, 처리량, 트래픽, 대역폭, RTT
		- 네트워크
			- 노드(node)와 링크(link)가 서로 연결되어 있으며 리소스를 공유하는 집합을 의미.
				- 노드 : 서버, 라우터, 스위치 등 네트워크 장치
				- 링크(엣지) : 유선 또는 무선과 같은 연결매체 (와이파이나 LAN)

		- 트래픽
			- 특정 시점에 링크 내의 '흐르는' 데이터의 양
				- 예) 서버에 저장된 파일(문서, 이미지, 동영상 등)을 클라이언트가 다운로드시 발생되는 데이터의 누적량을 의미.
			
			- 트래픽이 많다 : 흐르는 데이터가 많아지는 경우
			- 처리량이 많다 : 처리되는 트래픽이 많아지는 경우

				- 예) 트래픽 발생 : 단위 : bps (bits per second)
				- 100kb 이미지를 1,000명이 다운로드 시 누적 트래픽은? 100kb * 1,000 = 100,000kb(100MB)
				- 10MB 동영상을 10명이 다운로드시 누적 트래픽은? 10MB * 10 = 100MB

		- 처리량(throughput)
			- 링크 내에서 성공적으로 전달된 데이터의 양을 말하며 보통 얼만큼의 트래픽을 처리했는지를 나타냅니다.
				- 많은 처리량을 가진다 : 많은 트래픽을 처리한다.
				- 단위 : bps(bits per second) 초당 전송 또는 수신되는 비트 수
			- 처리량은 사용자들이 많이 접속할 때마다 커지는 트래픽, 네트워크 장치 간의 대역폭, 네트워크 중간에 발생하는 에러, 장치의 하드웨어 스펙에 영향을 받음.

		- 대역폭(bandwidth)
			- 주어진 시간 동안 네트워크 연결을 통해 흐를 수 있는 최대 비트 수를 말함.
				- 대역폭이 높을수록 사용자에게 빠른 서비스를 제공.
				- 대략적인 최대 동시 접속자수 유추의 척도가 된다.
				- 단위 : bps(bits per second) 초당 전송 또는 수신되는 비트 수

				- 100Mbps라는 대역폭을 가진 서버가 있고, 한 사용자당 100kbps로 동영상 파일을 요청할 시 최대 동접자 수는?
					--> 100,000 / 100 = 약 1,000명
		- RTT (Round Trip Time)
			- 신호를 전송하고 해당 신호의 수신확인에 걸린 시간을 더한 값이자 어떤 메시지가 두 장치 사이를 왕복하는 데 걸린 시간.
				예) 800ms 전송, 900ms 수신 --> RTT = 1700ms(1.7s)

	2. 네트워크 토폴로지 : 버스, 스타, 트리
		- 네트워크 토폴로지 : 노드와 링크가 어떻게 구성 되어 있는지를 뜻함.
		- 버스 토폴로지
			- 특징
				1. 하나의 회선에 여러개의 노드
				2. 노드 추가, 삭제 쉬움
				3. 설치 비용 적음
			- 장점
				1. 소규모 네트워크를 구축하기 쉬움
				2. 한 노드에 장애가 발생해도 다른 노드에 영향 미치지 않음.
			- 단점
				1. 메인 링크에 많은 트래픽이 생기면 정체현상 발생 가능성 높음 (패킷 손실율 높음)
				2. 메인 링크 망가지면 큰 문제
		- 스타 토폴로지
			- 특징
				1. 중앙에 있는 노드를 기반으로 연결된 형태
				2. 노드 추가, 삭제 쉬움
			- 장점
				1. 중앙노드가 아닌 한 노드에 장애가 발생해도 다른 노드에 영향을 미치지 않음.
				2. 안정성이 높음. 중앙노드가 아닌 한 노드에 침해가 발생했을 때 다른 노드로 확장하기 어려움.(다른 노드로 가려면 중앙노드를 무조건 거처야 하므로)
				3. 한 링크에 문제가 생겨도 해당 부분만 영향을 받고 나머지는 정상 작동.
			- 단점
				1. 중앙 노드 에러시 큰 문제.
		- 트리 토폴로지
			- 특징
				1. 트리형태(계층적 토폴로지)
				2. 노드 추가, 삭제 보통(리프 노드를 기반으로 확장은 용이, 그러나 다른 노드는 어려움)
				3. 버스 토폴로지와 스타토폴로지의 하이브리드 형태
			- 장점
				1. 노드 확장이 용이(주로 리프노드로 확장함)
				2. 리프 노드의 에러는 나머지 부분에 영향을 미치지 않음.
			- 단점
				1. 특정 노드 트래픽 집중시 하위노드에 영향.
				2. 루트노드에 문제가 생기면 전체 네트워크에 큰 문제.
			- 백본케이블 : 여러 소형 네트워크들을 묶어 대규모 파이프라인을 통해 극도로 높은 대역폭으로 다른 네트워크들의 집합과 연결되는 네트워크(대규모 패킷 통신망)

	3. 네트워크 토폴로지: 링, 메시
		- 링형 토폴로지
			- 특징
				1. 고리 형태
				2. 노드 추가, 삭제가 쉬움.
			- 장점
				1. 노드 수가 많아져도 데이터 손실 없음. 토큰을 기반으로 연속적으로 노드를 거치며 통신 권한 여부를 따지고 해당 권한이 없는 노드는 데이터를 전달받지 않음.
			- 단점
				1. 링크 또는 노드가 하나만 에러 발생해도 전체 네트워크에 영향
				2. 토큰이 없는 노드는 통신에 참여를 못하며 데이터 공유가 안됨.

		- 메시 토폴로지
			- 특징
				1. 그물망 형태
				2. 노드 추가, 삭제 어려움
				3. 풀 메시 토폴로지의 경우 n * (n-1) / 2 의 회선이 필요함.
			- 장점
				1. 안정성이 높음. 한 노드가 장애가 나도 다른 노드에 영향을 미치지 않음.
				2. 트래픽 분산 가능
			- 단점
				1. 회선이 비효율적으로 많기에 구축 비용이 고가.

	4. 네트워크 토폴로지의 필요성과 병목현상
		- 토폴로지의 필요성 : 병목현상을 해결하는 척도가 된다.

		- 병목현상 : bottleneck - 트래픽에 의해 데이터 흐름이 제한되는 상황 (핫스팟이라고도 부름 (네트워크 한정))
			--> 해결 : Distributed Web Infrastructure

	5. 유니캐스트, 멀티캐스트, 브로드캐스트
		- 유니캐스트
			- 1:1 통신 / HTTP
			- 가장 일반적인 네트워크 전송 형태
		- 멀티캐스트
			- 1: 그룹 통신 / 방송
			- 그룹에 속한 장치들에게 데이터 전달.
		- 브로드캐스트
			- 1: 모든 통신 / ARP (Address Resolution Protocol)
			- 로컬 네트워크 내에 있는 모든 호스트에게 데이터를 전달할 

		- 네트워크의 분류 : LAN, MAN, WAN
			1. LAN (Local Area Network - 근거리 통신망)
				- MAN, WAN 보다 높은 안정성, 속도 / 소규모 네트워크(집, 사무실) - 보통 허브나 스위치로 연결됨.
				- 하나의 논리적 주소인 IP를 기반으로 여러개의 물리적 주소인 MAC 주소로 구별하는 네트워크라고도 볼 수 있음.
			2. MAN (Metropolitan Area Network - 대도시 통신망)
				- 도시와 도시의 통신망을 뜻하며 2개 이상의 LAN이 연결되어 구성됨
				- 라우터, 브릿지 등으로 연결됨
			3. WAN (Wide Area Network - 광역 통신망)
				- 국가와 국가간의 통신망을 뜻하며 인터넷이라고도 함.
				- 많은 라우터를 거쳐 다른 국가와도 연결됨.

		- TCP / IP 4계층
			- 장치들이 인터넷 상에서 데이터를 주고받을 때 쓰는 독립적인 프로토콜의 집합을 의미
			- TCP / IP : Transmission Control Protocol / Internet Protocol
				- 인터넷을 통해 데이터를 보낼 때 주로 TCP와 IP를 이용해서 보내기 때문
			
			[Application - SMTP, HTTP/HTTPS, FTP, SSH]
			[Transport - UDP, TCP]
			[Internet - IPv4 / IPv6, ICMP, ARP]
			[Network Access (네트워크 접속 계층 - 링크 계층)]

			1. Application 계층
				- HTTP, SMTP, SSH, FTP 등 웹 서비스, 이메일 등 서비스를 실질적으로 사람들에게 제공하는 층.
			2. Transport 계층 (전송 계층)
				- TCP, UDP가 대표적
				- 어플리케이션 계층에서 받은 메세지를 기반으로 세그먼트 또는 데이터그램으로 데이터를 쪼개고 데이터가 오류없이 순서대로 전달되도록 도움을 주는 층.
			3. Internet (인터넷 계층)
				- IP, ICMP, ARP가 대표적이며 한 노드에서 다른 노드로 전송 계층에서 받은 세그먼트 또는 데이터그램을 패킷화 하여 목적지로 전송하는 역할을 담당.
			4. Network Access (Link 계층)
				- 전선, 광섬유, 무선 등으로 데이터가 네트워크를 통해 물리적으로 전송되는 방식을 정의.

		- 캡슐화와 비캡슐화
			- Encapsulation(캡슐화)
				- 송신자가 수신자에게 데이터를 보낼 때 데이터가 각 계층을 지나며 각 계층의 특징들이 담긴 헤더들이 붙여지는 과정.
					- 예) 전송계층은 TCP 헤더, 네트워크 계층은 IP 주소 헤더를 추가
			- Decapsulation(비캡슐화)
				- 캡슐화 과정의 역과정.
				- 수신자 측에서 캡슐화된 데이터를 역순으로 제거하면서 운용계층까지 도달하는 것을 의미.
		
		- PDU(Protocol Data Unit)
			- TCP / IP 4계층을 기반으로 각 계층의 데이터 단위를 의미
				1. 애플리케이션 계층 : 메시지
				2. 전송 계층 : 세그먼트(TCP), 데이터그램(UDP)
				3. 인터넷 계층 : 패킷
				4. 링크 계층 : 프레임(데이터 링크 계층), 비트(물리 계층)
			- 세그먼트 : 적절한 크기로 쪼갠 조각 (세그먼트와 데이터그램의 의미는 같음)
			- 패킷 : 세그먼트에 SP와 DP가 포함된 IP헤더가 붙은 형태의 조각
				- SP: 송신자의 32비트 IP주소
				- DP: 수신자의 32비트 IP주소
					- IPv4 기준.
			- 프레임 : MAC주소 헤더와 CRC / 체크섬 트레일러가 붙은 조각.
				- CRC / 체크섬 트레일러
					- 데이터의 오류감지를 위한 수학적 함수가 적용된 값.
					- 링크의 오류(과도한 트래픽) 로 인해 데이터 손상을 감지하는 역할을 함.

		- OSI 7계층
			- TCP / IP 계층과 달리 OSI 계층은 애플리케이션 계층을 세 개로 쪼개고 링크 계층을 데이터 렝크 계층, 물리 계층으로 나눠서 표현
			- 인터넷 계층을 네트워크 계층으로 부름.

			(Application Layer)
			[Application Layer]
			[Presentation Layer]
			[Session Layer]

			(Transport Layer)
			[Transport Layer]

			(Internet Layer)
			[Network Layer]

			(Network Access Layer)
			[Data-Link Layer]
			[Physical Layer]

		- 패킷으로 쪼개질 때 MTU(Maximum Transmission Unit)를 기반으로 쪼개짐.
		- MTU는 네트워크 통신 시 가장 큰 PDU의 크기를 말함.

		- MTU와 MSS
			- MTU는 IP헤더와 TCP 헤더의 크기까지 합치지만 MSS(Maximum Segment Size)는 TCP에서 사용할 수 있는 데이터의 크기이자 TCP 헤더, IP 헤더를 뺀 크기를 말함.
			- MTU : IP header + TCP header
			- MSS : No Ip Header, No TCP Header
			- 일반적으로 MTU는 1500바이트, MSS는 1460 바이트(Payload) (IP 헤더 20byte, TCP 헤더 20byte)
				- MTU가 1500이라도 데이터는 보통 1460 바이트 이하의 크기로 보내야 전달이 가능하다.

		- 패킷이 분할되지 않는 경우
			- 패킷을 분할 할 수 없어 네트워크 경로 상에 있는 어떠한 라우터나 장치의 MTU를 초과할 때 분할해서 전달하는 것이 아니라 전달을 아예 하지 않을 수도 있음.

			- IPv6 : 분할을 허용하지 않음.
			- IPv4 : Flags 필드가 존재하며 bit가 1이되면 "Don't Fragment" (DF) 플래그가 활성화되어 분할이 불가능해짐.

		- PMTUD(Path MTU Discovery)
			- 수신자와 송신자의 경로 상에서 장ㅇ치가 패킷을 누락한 경우 테스트 패킷의 크기를 낮추면서 MTU에 맞게끔 반복해서 보내는 과정을 말함.

		- HTTP
			- Hypertext Transfer Protocol
				- 서버와 브라우저간에 데이터를 주고 받기 위해 설계된 프로토콜.
				- 브라우저 뿐만 아니라 서버와 서버간의 통신할 때도 많이 이용.
				- 특징
					1. HTTP는 헤더를 통한 확장이 쉬움
						- 헤더 값에 어떠한 값을 넣어서 HTTP 요청을 할 때 쉽게 다른 값을 추가할 수 있음.
					2. HTTP는 stateless함.
						- 동일한 연결에서 연속적으로 수행되는 두 요청 사이에 연속적인 상태(state)값은 없음.
						- 서버가 클라이언트의 이전 상태를 보존하지 않는다는 의미.
						- 만약 로그인 상태를 보존해야 한다면 stateless로 짜면 매번 로그인 해야함.
		- SSH
			- Secure Shell Protocol
			- 보안되지 않은 네트워크에서 네트워크 서비스를 안전하게 운영하기 위한 암호화 네트워크 프로토콜.
			- 보통 프라이빗 키가 있는 경로에서 키를 명시하고 실행
				- ssh <pem> <user>@<serverIP>
			- SCP(Secure Copy)를 이용해서 SSH를 이용해 파일을 전송할 수 있음.
				- scp <source> <destination>

		- FTP
			- 노드와 노드간의 파일을 전송하는데 사용되는 프로토콜
			- 파일을 암호화해서 전송하는 FTPS, SFTP로 대체됨.

		- SMTP
			- 인터넷을 통해 메일을 보낼 때 사용되는 프로토콜(Simple Mail Transfer Protocol)
			- 보통 서비스를 운영하면 메일링 서비스를 하게 되는데 node.js를 통해 메일을 보낸다면 이를 통해 보내야 함.

		- TCP와 UDP
			- 애플리케이션 계층에서 받은 메시지를 기반으로 세그먼트 또는 데이터그램으로 데이터를 쪼개고 데이터가 오류없이 순서대로 전달되도록 도움을 주는 층.
			- TCP
				- 가상회선 패킷 교환 방식
				- 오류검사 메커니즘
					1. 재전송 : 시간 초과 기간이 지나면 서버는 전달되지 않은 데이터에 대해 재전송을 시도
					2. 체크섬 : 체크섬을 통해 무결성을 평가
						- 송신된 데이터의 체크섬과 수신된 데이터의 체크섬 값을 비교해서 올바르게 왔는지를 확인.
				- 해더
			- UDP
				- 데이터그램 패킷 교환 방식
				- 오류검사 메커니즘
					- 단순한 체크섬만 지원
				- 헤더
					- 32비트(8바이트) 고정길이

			- TCP vs UDP
				- TCP : 가상회선 패킷 교환 방식, UDP : 데이터그램 교환 방식
				- TCP : 신뢰성 O, UDP : 신뢰성 X
				- TCP : 재전송, 체크섬을 통한 오류검사, UDP : 체크섬만을 통한 오류검사
				- TCP : 패킷 순서 보장, UDP : 순서 보장하지 않음.
				- TCP : (20-60) 바이트 가변 헤더 길이, UDP : 8바이트 고정 헤더 길이
				- TCP : 연결보장함(3-way handshake로 연결을 맺고, 4-way handshake로 연결을 해제), UDP : 비연결성, 그냥 데이터를 보냄, 연결 해제 비용이 없음
				- TCP : 브로드캐스트 지원 X, UDP : 브로드캐스트 지원 O
				- TCP : 속도 느림, UDP : 속도 빠름.

			- 인터넷 계층(Internet Layer)
				- IP, ICMP, ARP가 대표적
				- 한 노드에서 다른 노드로 전송 계층에서 받은 세그먼트 또는 데이터그램을 패킷화 하여 전송

			- ICMP
				- ICMP(Internet Control Message Protocol)
				- 노드와 노드 사이에서 통신이 잘되는 지를 확인할 때 쓰는 프로토콜
				- 데이터를 교환하는데 사용되지 않는 프로토콜.
				- 일반적으로 echo request, echo request --> 테스팅에 사용됨.
				- IP와는 달리 TCP 또는 UDP와 같은 전송 계층 프로토콜과 연관되지 않고 독립적인 비연결형 프로토콜로, ICMP를 비연결형 프로토콜을 기반으로 구축됨.
					- 예) ping www.google.com 을 통해 ICMP로 하는 것을 확인할 수 있음.

			- TCP의 연결 성립 과정 : 3-way handshake
				1. SYN 단계 : 클라이언트는 서버에 클라이언트의 ISN(Initial Sequence Numbers)을 담아 SYN을 보냄.
				2. SYN + ACK 단계 : 서버는 클라이언트의 SYN을 수신, 서버의 ISN을 보내며 승인 번호로 클라이언트의 ISN + 1을 보냄.
				3. ACK 단계 : 클라이언트는 서버의 ISN + 1한 값인 승인번호를 담아 ACK를 서버에 보냄.

				* ISN: TCP(Transmission Control Protocol) 기반 데이터 통신에서 각각의 새 연결에 할당된 고유한 32비트 시퀀스 번호를 나타냄.
					- TCP 연결을 통해 전송되는 다른 데이터 바이트와 충돌하지 않는 시퀀스 번호를 할당하는 데 도움이 됨.
				* SYN: synchronization의 약자, 연결 요청 플래그
				* ACK: acknowledgement의 약자, 응답 플래그

			- TCP의 연결 해제 과정 : 4-way handshake
				1. 클라이언트가 연결을 닫으려고 할 때 FIN으로 설정된 세그먼트를 보냄. 클라이언트는 FIN_WAIT_1 상태로 들어가고 서버의 응답을 기다림.
				2. 서버는 클라이언트로 ACK라는 승인 세그먼트를 보내고 CLOSE_WAIT 상태에 들어감. 클라이언트가 세그먼트를 받으면 FIN_WAIT_2 상태에 들어감.
				3. 서버는 LAST_ACK 상태가 되며 일정 시간 이후에 클라이언트에 FIN이라는 세그먼트를 보냄
				4. 클라이언트는 TIME_WAIT 상태가 되고 다시 서버로 ACK를 보내서 서버는 CLOSED 상태가 되며, 이후 클라이언트는 어느 정도의 시간(TIME_WAIT으로 설정된 시간)을 대기한 후 연결이 닫힘.
					- TIME_WAIT : 지연 패킷이 발생했을 때 데이터 무결성을 해결하기 위함.
						- 두배의 최대 세그먼트 수명(MSL) 시간을 기다림.
							- MSL은 기본적으로 2분.
						- 소켓이 바로 소멸되지 않고 일정 시간 유지되는 상태를 말하며 지연 패킷 등의 문제점을 해결하는 데 쓰임.
						- 또한 연결을 올바르게 닫힌 상태로 만들기 위해 존재.
							- 예) CLOSED가 아닌 LAST_ACK로 되어 있으면 그 다음 연결 시 오류 발생.

			- 






