Item 21: Use "apply" to Call Functions with Different Numbers of Arguments
	
	- "variadic" or "variable-arity" function
		-> can take any number of arguments.

			ex)
				============================================================
				average(1, 2, 3)					// 2
				average(1)							// 1
				average(3, 1, 4, 1, 5, 9, 2, 6, 5) 	// 4
				============================================================

	- "fixed-arity"
		-> take a single argument containing an array of values

			ex)
				============================================================
				averageOfArray([1, 2, 3])					// 2
				averageOfArray([1])							// 1
				averageOfArray([3, 1, 4, 1, 5, 9, 2, 6, 5])	// 4
				============================================================

	- "apply" method
		-> takes an array of arguments and calls the function as if each element of the array were an individual argument of the call.

		-> takes a first argument that specifies the binding of "this" for the function being called.

			ex)
				============================================================
				let scores = getAllScores()
				average.apply(null, scores)
				// -> same to average(scores[0], scores[1], scores[2])
				============================================================

		-> can be used on "variadic" methods, too

			ex)
				============================================================
				let buffer = {
					state: [],
					append: function() {
						for(let i=0, n = arguments.length; i<n; i++){
							this.state.push(arguments[i])
						}
					}
				}
				buffer.append("Hello, ")
				buffer.append(firstName, " ", lastName, "!")
				buffer.append(newline)

				// with apply
				buffer.append.apply(buffer, getInputStrings())
				============================================================

		-> takes arguments as an array, while "call()" takes them individually

			ex)
				======================================================================
				function greet(greeting, punctuation) {
					return `${greeting}, ${this.name}${punctuation}`
				}

				const person = { name: "Alice" }

				console.log(greet.call(person, "Hello", "!")) // Hello, Alice!
				console.log(greet.apply(person, ["Hello", "!"])) // Hello, Alice!
				======================================================================

		-> function borrowing

			ex)
				======================================================================
				const person1 = { name: "Bob" }
				const person2 = { name: "Alice" }

				function sayHello() {
					console.log(`Hello, ${this.name}`)
				}

				sayHello.apply(person1)	// Hello, Bob
				sayHello.apply(person2)	// Hello, Alice
				======================================================================

		-> Using with Arrays

			ex)
				======================================================================
				const numbers = [1, 5, 3, 8, 2]
				const max = Math.max.apply(null, numbers) // 8
				======================================================================

		-> Dynamic Arguments

			ex)
				======================================================================
				function sum(a, b, c) {
					return a + b + c
				}

				const args = [1, 2, 3]
				console.log(sum.apply(null, args)) // 6

				// Modern Alternative (using the spread operator)
				const max = Math.max(...numbers) // 6
				======================================================================

	* "apply()" can be slower than "call()" or the "spread operator"
		-> with large arrays, due to the overhead of handling the array.

	* with modern JavaScript(ES6+) "apply()" is less frequently used because the spread operator and call() often provide cleaner or more flexible alternatives.