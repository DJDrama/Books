Item 19: Get Comfortable Using Higher-Order Functions

	- functions that take other functions as arguments or return functions as their result.

	- taking a function as an argument (often referred to as a "callback function" because it is "called back" by the higher-order function) is a powerful and expressive idiom, and one that JavaScript programs use heavily.

		ex)
			================================================
			function compareNumbers(x, y) {
				if(x > y) return 1
				if(x < y) return -1
				return 0
			}

			// 1, 1, 3, 4, 5, 9
			[3, 1, 4, 1, 5, 9].sort(compareNumbers)
			================================================

		ex) anonymous function
			================================================
			[3, 1, 4, 1, 5, 9].sort(function(x, y) {
				if(x > y) return 1
				if(x < y) return -1
				return 0
			}) // 1, 1, 3, 4, 5, 9
			================================================

	- can simplify your code and eliminate tedious boilerplate.

		ex)
			================================================
			let names = ["Fred", "Wilma", "Pebbles"]
			let upper = names.map((name)=> {
			    return name.toUpperCase()
			})

			// ['FRED', 'WILMA', 'PEBBLES']
			console.log(upper) 
			================================================

		ex)
			================================================
			function bildString(n, callback){
				let result = ""
				for(let i=0; i<n; i++) {
					result += callback(i)
				}
				return result
			}

			let aIndex = "a".charCodeAt(0)
			let alphabet = buildString(26, (i) => {
				return String.fromCharCode(aIndex+i)
			})
			alphabet // abcdefghijklmnopqrstuvwxyz
			================================================

	(Summary)
		- Higher-order functions are functions that take other functions as arguments or return functions as their result.