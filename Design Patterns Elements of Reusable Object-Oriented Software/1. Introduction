1.1 What Is a Design Pattern?

1.2 Design Patterns in Smalltalk MVC
	(M)VC
		1. Model
			-> application object
		2. View
			-> screen presentation
		3. Controller
			-> defines the way the user interface reacts to user input

		- Decouples view and models by establishing a subscribe / notify protocol between them.
		- View must ensure that its appearance reflects the state of the model.
		- Views can be nested.
		- Main relationsihps in MVC are given by the Observer, Composite, and Strategy design patterns.

1.3 Describing Design Patterns

1.4 The Catalog of Design Patterns

1.5 Organizing the Catalog
	<Purpose>	
		(Scope)					
	[Creational : concern the process of object creation]
		(Class)		Factory Method
		(Object) 	Abstract Factory
					Builder
					Prototype
					Singleton

	[Structural : deal with the composition of classes or objects]
		(Class)		Adapter (class)
		(Object)	Adapter (object)
					Bridge
					Composite
					Decorator
					Flyweight
					Proxy

	[Behavioral : characterize the ways in which classes or objects interact and distribute responsibility]
		(Class)		Interpreter
					Template Method
		(Object)	Chain of Responsibility
					Command
					Iterator
					Mediator
					Memento
					Observer
					State
					Strategy
					Visitor

	* (Class) patterns
		-> deal with relationships between classes and their subclasses.
		-> established through inheritance, so they are static fixed at compile-time.

	* (Object) patterns
		-> deal with object relationships, which can be changed at run-time and are more dynamic.

1.6 How Design Patterns Solve Design Problems
	[Finding Appropriate Objects]
		- Object Oriented Programs
			-> made up of objects
			-> "Object": packages both data and the procedures that operate on that data.
			-> Procedures are typcially called methods or operations.
			-> An operation performs an operation when it receives a request(or message) from a client.

			(Restrictions -> object's internal state is said to be encapsulated)
			- it cannot be accessed directly, and its representation is invisible from outside te object.
				* "Requests" are the only way to get an object to execute an operation.
				* "Operations" are the only way to change an object's internal data.
	
	[Specifying Object Interfaces]
		- Operation's "signature"
			-> every operation declared by an object specifies the operation's name
			-> the objects it takes as parameters
			-> and the operation's return value

		- "Interface" to the object
			-> set of all signatures defined by an object's operations
			-> An object's interface characterizes the complete set of requests that can be sent to the object.

		- Dynamic Binding
			-> Run-time association of a request to an object and one of its operations is known as.
			-> issuing a request doesn't commit you to a particular implementation until run-time.
			



