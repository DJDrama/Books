Abstract Factory
	(Intent)
		- Provide an interface for creating families of related or dependent objects without specifying their concrete class.

	(Applicability)
		Use it when
			1. a system should be independent of how its products are created, composed, and represented.

			2. a system should be configured with one of multiple families of products.

			3. a family of related product objects is designed to be used together, and you need to enforce this constraint.

			4. provide a class library of products, and you want to reveal just their interfaces, not their implementations.

	(Benefits and liabilities)
		1. isolates concrete classes
			-> factory encapsulates the responsibility and the process of creating product objects
			-> isolates clients from implementation classes.
			-> Clients manipulate instances through their abstract interfaces.
			* product class names are isolated in the implementation of the concrete factory; they do not appear in client code.

		2. makes exchanging product families easy.
			-> easy to change the concrete factory an applicatino uses.
			-> use different product configurations simply by changing the concrete factory.

		3. promotes consistency among products.
			-> application use objects from only one family at a time.

		4. Supporting new kinds of products is difficult.
			-> AbstractFactory interface fixes the set of products that can be created.

	(Implementation)
		1. Factories as singletons
			-> app typically needs only one instance of a ConcreteFactory per product family.
			-> usually best implemented as a Singleton.

		2. Creating the products.
			-> AbstractFactory only declares an interface for creating products.
			-> concrete factory will specify its products by overriding the factory method for each.

		3. Defining extensible factories
			