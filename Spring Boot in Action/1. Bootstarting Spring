1. Bootstarting Spring

(1.1) Spring rebooted
	- Spring was configured with XML
	- Spring 2.5 introduced annotation-based component-scanning: Eliminated a great deal of explicit XML configuration for an app's own components.
	- Spring 3.0 introduced a Java-based configuration as a type-safe and refactorable option to XML.

	(1.1.1) Taking a fresh look at Spring
		- Suppose developing a very simple Hello World web app with Spring
			1) Project structure, complete with a Maven or Gradle build file including required dependencies.(At least, need Spring MVC and the Servlet API expressed as dependencies.)
			2) web.xml file(or a WebApplicationInitializer implementation) that declares Spring's DispatcherServlet.
			3) Spring configuration that enables Srping MVC.
			4) A controller class that will respond to HTTP requests with "Hello World".
			5) A web app server, such as Tomcat, to deploy the application to.
		- Only one item is specific to developing the Hello World functionality: the controller.
		- The rest of it is generic boilerplate that you'd need for any web app developed with Spring.
		- Spring Boot will handle the logistics of executing the app. Only need to bring the applicatino code.
		- You can run HelloController at the command line like below
			[ $ spring run HelloController.groovy ]
		- The Srping Boot CLI was able to run it from its uncompiled form.

	(1.1.2) Examining Spring Boot essentials
		- Four core tricks that Spring Boot performs
			1) Automatic Configuration - Spring Boot can automatically provide configuration for app functionality common to many Spring apps
			2) Starter dependencies - it will ensure that the libraries needed are added to the build
			3) The command-line interface - Optional feature of Spring Boot lets you write complete apps with just app code, no need for traditional project build.
			4) The Actuator - Gives you insight into what's going on inside of a running Spring Boot app.

		1) Auto-Configuration
			+ Spring Boot can automatically configure common configuration scenarios.
			+ If Spring Boot detects that you have the H2 database library in your app's classpath, it will automatically configure an embedded H2 database.
			+ If JdbcTemplate is in the classpath, then it will also configure a JdbcTemplate bean for you.
			+ No need for you to worry about configuring those beans. (Ready to inject into any of the beans you write.)

		2) Starter Dependencies
			+ they are really just special Maven (and Gradle) dependencies that take advantage of transitive dependency resolution to aggregate commonly used libraries under a handful of feature-defined dependencies.
			+ Just by adding the Spring Boot "web" starter(org.springframework.boot:spring-boot-starter-web) as a build depdency, this single dependency will transitively pull in all of those other dependencies so you don't have to ask for them all.
			+ Spring Boot dependencies free you from worrying about which versions of these libraries you need.

		3) The Command-Line Interface (CLI)
			+ Spring Boot offers an intriguing new way to quickly write Spring apps.
			+ makes it possible to write apps by doing more than writing the app code.
			+ leverages starter dependencies and auto-configuration to let you focus on writing code.
			+ there are no import lines in listing.
			+ CLI detected that which types are being used, and it knokws which starter dependencies to add to the classpath to make it work.
			+ Once dependencies are in the classpath, a series of auto-configuration kicks in and ensures that DispatcherServlet and Spring MVC are enabled so that the controller can respond to HTTP requests.

		4) The Actuator
			+ offers the ability to inspect the internals of your app at runtime.
			+ can inspect the inner workings of your app, including details such as
				1. What beans have been configured in the Spring app context
				2. What decisions were made by Spring Boot's auto-configuration
				3. What environment variables, system properties, configuration properties, and command-line qrguments are available to your app
				4. Current state of the threads in and supporting your app
				5. trace of recent HTTP requests handled by your app
				6. Various metrics pertaining to memory usage, garbage collection, web requests, and data source usage
			+ Actuator exposes above information in two ways: via web endpoints or via a shell interface.
			+ You can actually open a secure shell(SSH) into your app and issue commands to inspect your app as it runs.

	(1.1.3) What Spring Boot isn't
		- Spring boot is not an application server.
			+ It accomplishes this by embedding a servlet container (Tomcat, Jetty, or Undertow) within the app.
			+ But it's the embedded servlet container that provides app server functionality, not Spring Boot itself.
		- Does not implement any enterprise Java specifications such as JPA or JMS.
			+ But it does so by automatically configuring beans in Spring that support those features.
			+ For instance, Spring Boot does not implement JPA, but it does support JPA by auto-configuring the appropriate beans for a JPA implementation (Such as Hibernate)
		- Does not employ any form of code generation to accomplish its magic
			+ Instead, it leverages conditional configuration features from Spring 4, along with transtive dependency resolution offered by Maven and Gradle, to automatically configure beans in the Spring app context.

		* Spring Boot is just Spring. Spring Boot is doing the same kind of bean configuration in Spring that you might do on your own if Spring Boot did not exist.

(1.2) Getting Started with Spring Boot
	(1.2.1) Installing the Spring Boot CLI
	(1.2.2) Initializing a Spring Boot project with Spring Initializr

(1.3) Summary