[Iterator]
	- you might not implement iterators often, but valuable to understand how they work behind the scenes.
	
		ex)
			==============================================================================
			open class Trooper {
			    fun move(x: Int, y: Int) {
			        println("Moving to $x:$y")
			    }
			}

			class Squad(private val units: List<Trooper>) : Trooper() {
			    constructor(vararg units: Trooper) : this(units.toList())

			    // implement iterator()
			    operator fun iterator() = TrooperIterator(units)
			}

			class TrooperIterator(private val units: List<Trooper>) : Iterator<Trooper> {
			    private var i = 0
			    private var iterator: Iterator<Trooper> = this

			    override fun hasNext(): Boolean {
			        if (i >= units.size) return false
			        if (i == units.size - 1) {
			            if (iterator != this) {
			                return iterator.hasNext()
			            }
			        }
			        return true
			    }

			    override fun next(): Trooper {
			        if (iterator != this) {
			            if (iterator.hasNext()) {
			                return iterator.next()
			            } else {
			                i++
			                iterator = this
			            }
			        }
			        return when (val e = units[i]) {
			            is Squad -> {
			                iterator = e.iterator()
			                this.next()
			            }

			            else -> {
			                i++
			                e
			            }
			        }
			    }
			}

			fun main() {
			    val platoon: Squad = Squad(
			        Trooper(),
			        Squad(Trooper()),
			        Trooper(),
			        Squad(
			            Trooper(),
			            Trooper(),
			        ),
			        Trooper()
			    )

			    for (trooper in platoon) {
			        println(trooper)
			    }
			}
			==============================================================================