[Facade]
	- like helpers that hide the complex inner workings of an implementation.

	- acts as a mediator between the client code and the system's internal components, hiding the complexity of the system and presenting a simplified interface to the outside world.

	* Abstract Factory Pattern --> is about creating related classes,
	* Facade Pattern --> focuses on simplifying their usage once they've been created.

	(goal)
		-> to make a complex group of classes easy to use.

	(real world case)
		ex) Logger
			============================================================================
			class MyLogger {
				private val logger = Logger.getLogger("MyApp")

				fun logDebug(message: String){
					logger.debug(messsage)
				}

				fun logInfo(message: String){
					logger.info(message)
				}

				// ...
			}
			============================================================================

		ex) Hiding complex implementations
			============================================================================
			fun Server.startFromConfiguration(fileLocation: String) {
				val path = Path(fileLocation)
				
				// "toFile()" = Adapter Pattern
				val lines = path.toFile().readLines()

				val configuration = try {
					JsonParser().server(lines)
				} catch (e: RuntimeException) {
					YamlParser().server(lines)
					// ...
				}

				Server.withPort(configuration.port)
			}
			============================================================================

	(Drawbacks)
		1) if the subsystem changes, the facade may also need to be updated frequently.

		2) facade can hide important details, so it is difficult for the client to fully understand and utilize the subsystem.
			ex)
				============================================================================
				class ComplexSystem {
					fun doSomething() {
						// ...
					}
				}

				class Facade {
					priate val complexSystem = ComplexSystem()

					fun doSomething() {
						complexSystem.doSomething()
					}
				}
				============================================================================
				- "ComplexSystem" is doing the work, and the clients would be hard to modify or extend the behavior of the "ComplexSystem", they may not know to what extent it affects the rest of the system.