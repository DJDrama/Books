Coroutine context

	- in coroutine builder's definitions, first parameter is of type CoroutineContext
		ex)
			===========================================================================
			public fun CoroutineScope.launch(
				context: CoroutineContext = EmptyCoroutineContext,
				start: CoroutineStart = CoroutineStart.DEFAULT,
				block: suspend CoroutineScope.() -> Unit
			): Job {
				...
			}
			===========================================================================

		ex)
			===========================================================================
			public interface CoroutineScope {
				public val coroutineContext: CoroutineContext
			}

			public interface Continuation<in T> {
				public val context: CoroutineContext
				public fun resumeWith(result: Result<T>)
			}
			===========================================================================
			-> Continuation contains "CoroutineContext" as well.

	<CoroutineContext interface>
		- CoroutineContext is an interface that represents an element or a collection of elements.

		- each CoroutineContext element is a CoroutineContext itself

			ex)
				===========================================================================
				launch(CoroutineName("Name1")) { ... }

				launch(CoroutineName("Name2") + Job()) { ... }
				===========================================================================
				-> every element in this set has a unique key that is used to identify it.

				-> CoroutineName or Job implement CoroutineContext.Element, which implements the CoroutineContext interface.

			ex)
				===========================================================================
				fun main(){
					val name: CoroutineName = CoroutineName("A name")
					val element: CoroutineContext.Element = name
					val context: CoroutineContext = element

					val job: Job  = Job()
					val jobElement: CoroutineContext.Element = job
					val jobContext: CoroutineContext = jobElement
				}
				===========================================================================

	<Finding elements in CoroutineContext>
		* since CoroutineContext is like a collection, we can find an element with a concrete key using get.
			
			ex)
				===========================================================================
				fun main(){
					val ctx: CoroutineContext = CoroutineName("A name")
					val coroutineName: CoroutineName? = ctx[CoroutineName] // same as ctx[CoroutineName.Key]
					println(coroutineName?.name) // A name

					val job: Job? = ctx[Job]
					println(job) // null
				}
				===========================================================================
				-> to find a CoroutineName, we use just CoroutineName. (it is a companion object)

	<Adding contexts>
		* we can merge CoroutineContexts together.

		* when another element with the same key is added, just like in a map, the new element replaces the previous one.
			ex)
				===========================================================================
				import kotlinx.coroutines.CoroutineName
				import kotlin.coroutines.CoroutineContext

				fun main(){
				    val ctx1: CoroutineContext = CoroutineName("Name1")
				    println(ctx1[CoroutineName]?.name) // Name1

				    val ctx2: CoroutineContext = CoroutineName("Name2")
				    println(ctx2[CoroutineName]?.name) // Name2

				    val ctx3: CoroutineContext = ctx1 + ctx2
				    println(ctx3[CoroutineName]?.name) // Name2
				}
				===========================================================================

	<Empty Coroutine Context>
		- since CoroutineContext is like a collection, we also have an empty context.
			-> such a context by itself returns no elements; if we add it to another context, 
			-> it behaves exactly like this other context.

			ex)
				===========================================================================
				import kotlinx.coroutines.CoroutineName
				import kotlinx.coroutines.Job
				import kotlin.coroutines.CoroutineContext
				import kotlin.coroutines.EmptyCoroutineContext

				fun main() {
				    val empty: CoroutineContext = EmptyCoroutineContext
				    println(empty[CoroutineName])
				    println(empty[Job])

				    val ctxName = empty + CoroutineName("Name1") + empty
				    println(ctxName[CoroutineName]) // CoroutineName(Name1)
				}
				===========================================================================

	<Subtracting elements>
		- elements can also be removed from a context by their key using the "minusKey" function.
			ex)
				===========================================================================
				import kotlinx.coroutines.CoroutineName
				import kotlinx.coroutines.Job
				import kotlin.coroutines.CoroutineContext

				fun main() {
				    val ctx: CoroutineContext = CoroutineName("Name1") + Job()
				    println(ctx[CoroutineName]?.name) 		// Name1
				    println(ctx[Job]?.isActive) 			// true

				    val ctx2 = ctx.minusKey(CoroutineName)
				    println(ctx2[CoroutineName]?.name) 		// null
				    println(ctx2[Job]?.isActive) 			// true

				    val ctx3 = (ctx + CoroutineName("Name2"))
				        .minusKey(CoroutineName)
				    println(ctx3[CoroutineName]?.name) 		// null
				    println(ctx3[Job]?.isActive) 			// true
				}
				===========================================================================

	<Folding context>
		- similarto "fold" for other collections.
			-> an initial accumulator value
			-> an operation to produce the next state of the accumulator, based on the current state, and the element it is currently invoked in.

				ex)
					===========================================================================
					import kotlinx.coroutines.CoroutineName
					import kotlinx.coroutines.Job
					import kotlin.coroutines.CoroutineContext

					fun main() {
					    val ctx = CoroutineName("Name1") + Job()

					    ctx.fold("") { acc, element -> "$acc$element" }
					        .also(::println) 			//  CoroutineName(Name1) JobImpl{Active}@7daf6ecc

					    val empty = emptyList<CoroutineContext>()
					    ctx.fold(empty) { acc, element -> acc + element }
					        .joinToString()
					        .also(::println)			// CoroutineName(Name1), JobImpl{Active}@7daf6ecc
					}
					===========================================================================

	<Coroutine context and builders>
		- by default, the parent passes its context to the child, whichi is one of the parent-child relationship effects.
		- child inherits context from its parent.
			ex)
				===========================================================================
				import kotlinx.coroutines.*

				fun main() = runBlocking(CoroutineName("main")) {
				    log("Started")              // [main] Started

				    val v1 = async {
				        delay(500)
				        log("Running async")    // [main] Running async
				        42
				    }

				    launch {
				        delay(1000)
				        log("Running launch")   // [main] Running launch
				    }

				    log("The answer is ${v1.await()}") // The answer is 42
				}

				fun CoroutineScope.log(msg: String) {
				    val name = coroutineContext[CoroutineName]?.name
				    println("[$name] $msg")
				}
				===========================================================================

	<Accessing context in a suspending function>
		* context is referenced by continuations, which are passed to each suspending function.
			-> it is possible to access a parent's context in a suspending function.
				ex)
					===========================================================================
					import kotlinx.coroutines.*
					import kotlin.coroutines.coroutineContext

					suspend fun main() = withContext(CoroutineName("Outer")) {
					    printName()         // Outer
					    launch(CoroutineName("Inner")) {
					        printName()     // Inner
					    }
					    delay(10)
					    printName()         // Outer
					}

					suspend fun printName() {
					    println(coroutineContext[CoroutineName]?.name)
					}
					===========================================================================

	<Creating our own context>
		- we can create our coroutine context pretty easily.
			-> create a class that implements the CoroutineContext.Element interface.
				ex)
					===========================================================================
					class MyCustomContext : CoroutineContext.Element {
					    override val key: CoroutineContext.Key<*> = Key

					    companion object Key : CoroutineContext.Key<MyCustomContext>
					}
					===========================================================================

			ex)
				===========================================================================
				import kotlinx.coroutines.*
				import kotlin.coroutines.CoroutineContext
				import kotlin.coroutines.coroutineContext

				suspend fun main() = withContext(CoroutineName("Outer")) {
				    printNext()     // Outer: 0
				    launch {
				        printNext() // Outer: 1
				        launch {
				            printNext() // Outer: 2
				        }
				        launch(CounterContext("Inner")) {
				            printNext() // Inner: 0
				            printNext() // Inner: 1
				            launch {
				                printNext()     // Inner: 2
				            }
				        }
				    }
				    printNext() // Outer: 3
				}

				class CounterContext(
				    private val name: String
				) : CoroutineContext.Element {
				    override val key: CoroutineContext.Key<*> = Key
				    private var nextNumber = 0

				    fun printNext() {
				        println("$name: $nextNumber")
				        nextNumber++
				    }

				    companion object Key : CoroutineContext.Key<CounterContext>
				}

				suspend fun printNext() {
				    coroutineContext[CounterContext]?.printNext()
				}

				===========================================================================

	[Summary]
		* "CoroutineContext" is similar to map or a set collection.
			-> indexed set of "Element" instances, where each Element is also a CoroutineContext.
			-> Every element in it has a unique "Key" that is used to identify it.

