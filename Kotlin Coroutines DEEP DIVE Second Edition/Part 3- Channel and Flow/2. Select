Select

	- lets us await the result of the first coroutine that completes

	<Selecting deferred values>
		- when we want to request data from multiple sources, but we're only interested in the fastest response, we can use "select" function.

		- inside "select", we can call "onAwait" on Deferred value

			ex)
				===================================================
				import kotlinx.coroutines.*
				import kotlinx.coroutines.selects.select

				suspend fun main(): Unit = coroutineScope {
				    println(askMultipleForData())
				}

				val scope = CoroutineScope(SupervisorJob())
				suspend fun askMultipleForData(): String {
				    val defData1 = scope.async { requestData1() }
				    val defData2 = scope.async { requestData2() }
				    return select {
				        defData1.onAwait { it }
				        defData2.onAwait { it }
				    }.also { coroutineContext.cancelChildren() } // Cancel other coroutines
				}

				suspend fun requestData1(): String {
				    delay(100_000)
				    return "Data1"
				}

				suspend fun requestData2(): String {
				    delay(1000)
				    return "Data2"
				}
				===================================================
				(Stdout)
					Data2 // faster than "Data1"

	<Selecting from channels>
		- onReceive
			-> selected when this channel has a value
			-> select returns the result of its lambda expression

			ex)
				===================================================
				import kotlinx.coroutines.CoroutineScope
				import kotlinx.coroutines.channels.produce
				import kotlinx.coroutines.delay
				import kotlinx.coroutines.runBlocking
				import kotlinx.coroutines.selects.select

				fun main() = runBlocking {
				    val fooChannel = produceString("foo", 210L)
				    val barChannel = produceString("BAR", 500L)

				    repeat(7) {
				        select {
				            fooChannel.onReceive {
				                println("From fooChannel: $it")
				            }
				            barChannel.onReceive {
				                println("From barChannel: $it")
				            }
				        }
				    }
				}

				suspend fun CoroutineScope.produceString(s: String, time: Long) = produce {
				    while (true) {
				        delay(time)
				        send(s)
				    }
				}
				===================================================
				(Stdout)
					From fooChannel: foo
					From fooChannel: foo
					From barChannel: BAR
					From fooChannel: foo
					From fooChannel: foo
					From barChannel: BAR
					From fooChannel: foo

		- onReceiveCatching
			-> selected when this channel has a value or is closed.
			-> receives ChannelResult
			-> select returns the result of its lambda expression

		- onSend
			-> selected when this channel has space in the buffer.
			-> select returns Unit

			ex)
				===================================================
				import kotlinx.coroutines.channels.Channel
				import kotlinx.coroutines.delay
				import kotlinx.coroutines.launch
				import kotlinx.coroutines.runBlocking
				import kotlinx.coroutines.selects.select

				fun main(): Unit = runBlocking {
				    val c1 = Channel<Char>(capacity = 2)
				    val c2 = Channel<Char>(capacity = 2)

				    launch {
				        for (c in 'A'..'H') {
				            delay(400)
				            select<Unit> {
				                c1.onSend(c) {
				                    println("Sent $c to 1")
				                }
				                c2.onSend(c) {
				                    println("Sent $c to 2")
				                }
				            }
				        }
				    }
				    
				    launch {
				        while (true) {
				            delay(1000)
				            val c = select<String> {
				                c1.onReceive { "$it from 1" }
				                c2.onReceive { "$it from 2" }
				            }
				            println("Received $c")
				        }
				    }
				}
				===================================================
				(Stdout)
					Sent A to 1
					Sent B to 1
					Received A from 1
					Sent C to 1
					Sent D to 2
					Received B from 1
					Sent E to 1
					Sent F to 2
					Received C from 1
					Sent G to 1
					Received E from 1
					Sent H to 1
					Received G from 1
					Received H from 1
					Received D from 2
					Received F from 2
