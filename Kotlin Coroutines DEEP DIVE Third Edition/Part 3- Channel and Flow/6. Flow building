[Flow building]
	
	(Flow from raw values)
		- simplest way to create a flow is by using the "flowOf" function.
			ex)
				====================================================================
				import kotlinx.coroutines.flow.flowOf

				suspend fun main() {
				    flowOf(1, 2, 3, 4, 5)
				        .collect { print(it) } // 12345
				}
				====================================================================

			ex) flow with no values
				====================================================================
				import kotlinx.coroutines.flow.emptyFlow

				suspend fun main() {
				    emptyFlow<Int>()
				        .collect { print(it) }
				}
				====================================================================

	(Converters)
		- we can convert every Iterable, Iterator or Sequence into a Flow using the asFlow function.
			ex)
				====================================================================
				import kotlinx.coroutines.flow.asFlow

				suspend fun main() {
				    listOf(1, 2, 3, 4, 5)
				        .asFlow()
				        .collect { print(it) } // 12345
				}
				====================================================================

	(Converting a function to a flow)
		- "asFlow" extension function.
			ex)
				====================================================================
				import kotlinx.coroutines.delay
				import kotlinx.coroutines.flow.asFlow

				suspend fun main() {
				    val function = suspend {
				        delay(1000)
				        "UserName"
				    }

				    function.asFlow()
				        .collect { println(it) } // UserName
				}
				====================================================================

		- convert a regular function
			ex)
				====================================================================
				import kotlinx.coroutines.delay
				import kotlinx.coroutines.flow.asFlow

				suspend fun getUserName(): String {
				    delay(1000)
				    return "UserName"
				}

				suspend fun main() {
				    ::getUserName
				        .asFlow()
				        .collect { println(it) } // UserName
				}
				====================================================================

	(Flow builders)
		- the most popular way to make a flow is using the flow builder

	(channelFlow)
		- flow: cold data stream -> produces values on demand when they are needed.
			ex)
				====================================================================
				import kotlinx.coroutines.delay
				import kotlinx.coroutines.flow.*

				data class User(
				    val name: String
				)

				interface UserApi {
				    suspend fun takePage(pageNumber: Int): List<User>
				}

				class FakeUserApi : UserApi {
				    private val users = List(20) {
				        User("User$it")
				    }
				    private val pageSize: Int = 3

				    override suspend fun takePage(pageNumber: Int): List<User> {
				        delay(1000)
				        return users
				            .drop(pageSize * pageNumber)
				            .take(pageSize)
				    }
				}

				fun allUsersFlow(api: UserApi): Flow<User> = flow {
				    var page = 0
				    do {
				        println("Fetching page $page")
				        val users = api.takePage(pageNumber = page++)
				        emitAll(users.asFlow())
				    } while (users.isNotEmpty())
				}

				suspend fun main() {
				    val api = FakeUserApi()
				    val users = allUsersFlow(api = api)
				    val user = users
				        .first {
				            println("Checking $it")
				            delay(1000)
				            it.name == "User3"
				        }
				    println(user)
				}
				====================================================================
				(prints)
					Fetching page 0
					Checking User(name=User0)
					Checking User(name=User1)
					Checking User(name=User2)
					Fetching page 1
					Checking User(name=User3)
					User(name=User3)

		- using "channelFlow"
			ex)
				====================================================================
				fun allUsersFlow(api: UserApi): Flow<User> = channelFlow {
				    var page = 0
				    do {
				        println("Fetching page $page")
				        val users = api.takePage(pageNumber = page++)
				        users?.forEach { send(it) }
				    } while (users.isNotEmpty())
				}
				====================================================================
				(prints)
					Fetching page 0
					Checking User(name=User0)
					Fetching page 1
					Checking User(name=User1)
					Fetching page 2
					Checking User(name=User2)
					Fetching page 3
					Checking User(name=User3)
					Fetching page 4
					User(name=User3)

		* use case for "channelFlow": when we need to independently compute values.

	(callbackFlow)
		- inside, we operate on "ProducerScope<T>"

		- few functions that might be useful for wrapping callbacks:
			1) awaitClose
				-> function that suspends until the channel is closed.

			2) trySendBlocking(value)
				-> similar to "send", but blocking instead of suspending, so it can be used on non-suspending functions.

			3) close
				-> ends this channel

			4) cancel(throwable)
				-> ends this channel and sends an exception to the flow.

			ex)
				====================================================================
				import kotlinx.coroutines.CancellationException
				import kotlinx.coroutines.cancel
				import kotlinx.coroutines.channels.awaitClose
				import kotlinx.coroutines.channels.trySendBlocking
				import kotlinx.coroutines.flow.Flow
				import kotlinx.coroutines.flow.callbackFlow
				import javax.security.auth.callback.Callback

				fun flowFrom(api: callbackBasedApi): Flow<T> = callbackFlow {
				    val callback = object : Callback {
				        override fun onNextValue(value: T) {
				            trySendBlocking(value)
				        }

				        override fun onApiError(cause: Throwable) {
				            cancel(CancellationException("API Error", cause))
				        }

				        override fun onCompleted() = channel.close()
				    }
				    api.register(callback)
				    awaitClose { api.unregister(callback) }
				}
				====================================================================

