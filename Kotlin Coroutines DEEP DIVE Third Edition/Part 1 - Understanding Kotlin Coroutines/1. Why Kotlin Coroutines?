Why Kotlin Coroutines?

[Coroutines on Android (and other frontend platforms)]
	- on Android, each app has only one thread that can modify the view.
		-> this thread should never be blocked.

		ex)
			=========================================================================
			fun onCreate(){
				val news = getNewsFromApi() // This will block the main thread
				val sortedNews = news
					.sortedByDescending { it.publishedAt }
				view.showNews(sortedNews)
			}
			=========================================================================

	<Thread switching>
		ex)
			=========================================================================
			fun onCreate(){
				thread{
					val news = getNewsFromApi()
					val sortedNews = news.sortedByDescending { it.publishedAt }

					runOnUiThread{
						view.showNews(sortedNews)
					}
				}
			}
			=========================================================================
			(Problematic)
				- No mechanism to cancel these threads, often face memory leaks
				- Making so many threads is costly
				- Frequently switching threads is confusing and hard to manage
				- Code will get bigger and more complicated.

			(Situation)
				- open app and quickly close it
					-> opens and start multiple threads that fetch and process data.
					-> without cancelling, they will still be doing their job and trying to modify views that do not exist anymore.
						-> Unnecessary work for the device
						-> Possible exceptions in the background

	<Callbacks>
		- Idea: make functions non-blocking, but pass to them a function that should be executed once the process started by the callback function has finished.
			
			ex)
				=========================================================================
				fun onCreate(){
					getNewsFromApi { news ->
						val sortedNews = news
							.sortedByDescending { it.publishedAt }
						view.showNews(sortedNews)
					}
				}
				=========================================================================
				(Problem)
					- Does not support cancellation.

			ex) For cancellation
				=========================================================================
				fun onCreate(){
					startedCallbacks += getNewsFromApi { news ->
						val sortedNews = news
							.sortedByDescending { it.publishedAt }
						view.showNews(sortedNews)
					}
				}
				=========================================================================
				- To cancel, collect callbacks separately.
				* But has downsides!

			ex) Downsides! (Suppose we have to get data from three endpoints)
				=========================================================================
				fun showNews(){
					getConfigFromApi { config ->
						getNewsFromApi(config) { news ->
							getUserFromApi { user ->
								view.showNews(user, news)
							}
						}
					}
				}
				=========================================================================
				(Problems)
					- We can't parallelize calls
						-> getting news and user data might be parallelized, but callback architecture doesn't support that.

					- Supporting cancellation would require a lot of additional effort.
					- Increasing number of indentations make code hard to read("Callback Hell")

	<RxJava and other reactive streams>
		- Alternative approach : RxJava or its successor Reactor.
		- All operations happen inside a stream of data that can be started, processed, and observed.
		- These streams support thread-switching and concurrent processing
			-> often used to parallelize processing in applications.

			ex)
				=========================================================================
				fun onCreate(){
					disposables += getNewsFromApi()
						.subscribeOn(Schedulers.io())
						.observeOn(AndroidSchedulers.mainThread())
						.map { news ->
							news.sortedByDescending { it.publishedAt }
						}
						.subscribe { sortedNews ->
							view.showNews(sortedNews)
						}
				}
				=========================================================================
				- "disposables" are needed to cancel stream if the user exits the screen.
				- Better than callbacks
					1. no memory leaks
					2. supports cancellation
					3. proper use of threads

				- Problem
					1. Complicated
						-> subscribeOn, observeOn, map, or subscribe need to be learned.
						-> cancelling needs to be explicit
						-> functions need to return objects wrapped inside Observable or Single classes.
							ex)
								=============================================
								fun getNewsFromApi() : Single<List<News>>
								=============================================

	<Using Kotlin Coroutines>
		- Core functionality
			-> ability to suspend a coroutine at some point and resume it in the future.

		- when a coroutine is suspended, the thread is not blocked and is free to be used by other processes
			-> therefore it can be used to change the view or process other coroutines.
			(once the data is ready, the coroutine waits for the Main thread; once it gets the thread, it can continue from the point where it stopped.)


		- By using coroutines
			ex)
				=========================================================================
				fun onCreate(){
					viewModelScope.launch{
						val news = getNewsFromApi() // This will block the main thread
						val sortedNews = news
							.sortedByDescending { it.publishedAt }
						view.showNews(sortedNews)
					}
				}
				=========================================================================
				-> the code runs on the Main thread but it never blocks it.
				-> We are suspending the coroutine when we need to wait for data.
				-> When the coroutine is suspended, the Main thread can go do other things.
				-> Once the data is ready, our coroutine takes the Main thread again and starts from where it previously stopped.

		- Threads are costly.
			-> They need to be created, maintained, and they need their memory allocated.
				(Default size of the thread stack is 1MB -> a lot of extra memory is spent just because we create threads.) // Java optimizations, this does not necessarily mean 1MB times the number of threads will be used

