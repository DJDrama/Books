(Item 11: Always override hashCode when you override equals)
	- You must override hashCode in every class that overrides equals!
		- if you fail to do so, your class will violate the general contract for hashCode, which will prevent it from functioning properly in collections such as HashMap and HashSet.

	- Contract (Adapted from the Object specification)
		1. When the hashCode method is invoked on an object repeatedly during an execution of an application, it must consistently return the same value, provided no information used in equals comparisons is modified.

		2. If two objects are equal according to the equals(Object) method, then calling hashCode on the two objects must produce the same integer result.

		3. If two objects are unequal according to the equals(Object) method, it is not required that calling hashCode on each of the objects must produce distinct results.
			* programmer should be aware that producing distinct results for unequal objects may improve the performance of hash tables.


	- Equal objects must have equal hash codes.
		Ex)
			=================================================================
			Map<PhoneNumber, String> m = new HashMap<>();
			m.put(new PhoneNumber(707, 867, 5309), "Jenny");
			=================================================================
			-> it retuns null rather than "Jenny"
			* failure to override hashCode causes the two equal instances to have unequal hash codes, in violation of the hashCode contract.
				-> therefore, the get method is likely to look for the phone number in a different hash bucket from the one in which it was stored by the put method.

			* HashMap has an optimization that cahces the hash code associated with each entry and doesn't bother checking for object equality if the hash codes don't match.

			=================================================================
			// The worst possible legal hashcode implementation - never use!
			@Override public int hashCode(){
				return 42;
			}
			=================================================================
			-> it ensures that every object has the same hash code.
			-> therefore, every object hashes to the same bucket, and hash tables degenerate to linked lists.

	- Simple recipe
		1. Delcare an int variable named result, and initialize it to the hash code c for the first significant field in your object, as computed in step2.a.
		2. For every remaining significant field f in your object, do the following:
			a. compute an int hash code c for the field:
				i. if the field is of a primitive type, comput Type.hashCode(f), where Type is the boxed primitive class corresponding to f's type.
				ii. if the field is an object reference and this class's equals method compares the field by recursively invoking equals, recursively invoke hashCode on the field. If the value of the field is null, use 0 (0 is traditional)
				iii. if the field is an array, treat it as if each significant element were a separate field. Compute a hash code for each significant element by applying these rules recursively, and combine the values per step 2.b. If the array has no significant elements, use a constant, preferably not 0. If all elements are significant, use Arrays.hashCode

			b. Combine the hash code c computed in step2.a into result as follows:
				result = 31 * result + c;
		3. Return result.

	- When finished writing the hashCode method, write unit tests to verify your intuition.

	* exclude fields that are not used in equals comparisons, or you risk violating the second provision of the hashCode contract.

	- value 31 was chosen because it is an odd prime.
		-> If it were even and the multiplication overflowed, information would be lost, because multiplication by 2 is equivalent to shifting.
		-> the advantage of using a prime is clear, but it is traditional.
		-> a nice property of 31 is that the multiplication can be replaced by a shift and a subtraction for better performance on some architectures: 31 * i == (i << 5) - i.

		Ex)
			=================================================================
			// Typical hashCode method
			@Override
			public int hashCode(){
				int result = Short.hashCode(areaCode);
				result = 31 * result + Short.hashCode(prefix);
				result = 31 * result + Short.hashCode(lineNum);
				return result;
			}
			=================================================================
			-> it is clear that equal PhoneNumber instances have equal hash codes.
			-> a perfectly good hashCode implementation.

	- Guava's com.google.common.hash.Hashing
		- The Objects class has a static method that takes an arbitrary number of objects and returns a hash code for them.
		- method, named hash, lets you write one-line hashCode methods whose quality is comparable to those written according to the recipe in this Item.
		- Unfortunately, they run more slowly because they entail array creation to pass a variable number of arguments, as well as boxing and unboxking if any of the arguments are of primitive type.
		--> Recommended for use only in situations where performance is not critical.
			Ex)
				=================================================================
				// One-line hashCode method = mediocre performance
				@Override
				public int hashCode(){
					return Objects.hash(lineNum, prefix, areaCode);
				}
				=================================================================
	- if a class is immutable, and cost of computing the hash code is significant, consider caching the hash code in the object rather than recalculating it each time it is requested.
	- Otherwise, choose to lazily initialize the hash code the first time hash-Code is invoked.
		- Some care is required to ensure that the class remains thread-safe in the presence of a lazily initialized field.

		* initial value for the hashCode field should not be the hash code of a commonly created instance:
			=================================================================
			// hashCode method with lazily initialized cached hash code
			private int hashCode; // Automatically initiazlied to 0

			@Override
			public int hashCode(){
				int result = hashCode;
				if (result == 0){
					result = Short.hashCode(areaCode);
					result = 31 * result + Short.hashCode(prefix);
					result = 31 * result + Short.hashCode(lineNum);
					hashCode = result;
				}
				return result;
			}
			=================================================================

	- DO not exclude significant fields from the hash code computation to improve performance.
	- Don't provide a detailed specification for the value returned by hashCode, so clients can't reasonably depend on it; this gives you the flexibility to change it.
		https://stackoverflow.com/a/40788126

	[SUMMARY]
		- You must override hashCode every time you override equals, or your program won't run correctly.
		



			
