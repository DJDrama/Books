(Item 13: Override clone judiciously)
	- Cloneable interface: intended as a mixin interface for classes to advertise that they permit cloning.

	- Cloneable : determines the behavior of Object's protected clone implementation
		-> If a class implements Cloneable, Object's Clone method returns a field-by-field copy of the object; other wise it throws CloneNotSupportedException.

	- in practice, a class implementing Cloneable is expected to provide a properly functioning public clone method.

	(Contract)
		- Creates and returns a copy of the object.
			x.clone() != x

			x.clone().getClass() == x.getClass()

			x.clone().equals(x) 

			- By convention, the object returned by this method should be obtained by calling super.clone.

			- By convention, the returned object should be independent of the object being cloned.

	- suppose you want to implement Cloneable in a class whose superclass provides a well-behaved clone method.
		1. First call super.clone.

	- Immutable classes should never provide a clone method!
		- it would merely encourage wasteful copying.
		- here's how a clone method for PhoneNumber would look:
			ex)
				===========================================================================
				// Clone method for class with no references to mutable state
				@Override
				public PhoneNumber clone(){
					try{
						return (PhoneNumber) super.clone();
					} catch (CloneNotSupportedException e){
						throw new AssertionError(); // can't happen
					}
				}
				===========================================================================
				- PhoneNumber class should indiciate that it implements Cloneable.
				- Java supports covariant return types. (an overriding method's return type can be a subclass of the overriden method's return type)

				- CloneNotSupportedException is a checked exception.

	- clone method functions as a constructor; you must ensure that it does no harm to the original object and that it properly establishes invariants on the clone.

	- calling clone on an array returns an array whose runtime and compile-time types are identical to those of the array being cloned.

	- Cloneable architecture is incompatible with normal use of final fields referring to mutable objects
		-> remove final modifiers from some fields to make a class cloneable.

	- It is not always sufficient mererly to call clone recursively.
		-> use deep copy when needed.

	- clone method must never invoke an overridable method on the clone under construction.
	- throws CloneNotSupportedException, but overriding methods need not.
	- Public clone methods should omit the throws clause, as methods that don't throw checked exceptions are easier to use.

	- class should not implement Cloneable when designing a class for inheritance.
	- not to implement a working clone method, and to prevent subclasses from implementing one, by providing the following degenrate clone implementation:
		ex)
			===========================================================================
			// clone method for extendable class not supporting Cloneable
			@Override
			protected final Object clone() throws CloneNotSupportedException{
				throw new CloneNotSupportedException();
			}
			===========================================================================

	- clone method must be properly synchronized when write a thread-safe class that implements Cloneable.

	- All classes that implement Cloneable should override clone with a public method whose return type is the class itself.

	* A better approach to object copying is to provide a copy constructor or copy factory.
		ex) copy constructor	
			===========================================================================
			// Copy constructor
			public Yum(Yum yum) { ... };
			===========================================================================

		ex) copy factory
			===========================================================================
			// Copy factory
			public static Yum newInstance(Yum yum) { ... }
			===========================================================================

		(Advantages)
			- they don't rely on a risk-prone extralinguistic object creation mechanism
			- they don't demand unenforceable adherence to thinly documented contentions
			- they don't conflict with the proper use of final fields
			- they don't throw unnecessary checked exceptions
			- they don't require casts.
			- a copy constructor or factory can take an argument whose type is an interface implemented by the class
				ex) we can use new TreeSet<>(s) when trying to clone HashSet, s, to a TreeSet. (Conversion Constructor)

	* Copy functionality is best provided by constructors or factories.
		* Exception to this rule is arrays, which are best copied with the clone method.
			- Because arrays = deep copy, others like list, set etc are shallow copy.
			






