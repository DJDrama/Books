Item 51: Design method signatures carefully
	
	* Choose methods names carefully.
		-> names should always obey the standard naming conventions: Understandable & consistent
		-> avoid long method names.

	* Don't go overboard(Don't make too much) in providing convenience methods.
		-> too many methods make a class difficult to learn, use, document, test, and maintain.
		-> when in doubt, leave it out!

	* Avoid long parameter lists.
		-> Aim for four parameters or fewer.
		* Long sequences of identically typed parameters are especially harmful.

		(Techniques)
			1. break the method up into multiple methods, each of which requires only a subset of the parameters.
				ex) subList

			2. create helper classes to hold groups of parameters. (Static member classes)
				-> if a frequently occurring sequence of parameters is seen to represent some distinct entity.

			3. Builder pattern from object construction to method invocation.
				-> allow the client to make multiple "setter" calls on this object, each of which sets a single parameter or a small, related group.

	* For parameter types, favor interfaces over classes.
		ex) use Map instead of HashMap for a parameter.
			-> you can pass HashMap, TreeMap, ConcurrentHashMap, a submap of a TreeMap, or any Map implementations.

			* By using a class instead of an interface, you restrict your client to a particular implementation and force an unnecessary and potentially expensive copy operation if the input data happens to exist in some other form.

	* Prefer two-element enum types to boolean parameters, unless the meaning of the boolean is clear from the method name.
		-> Enums make your code easier to read and to write.
		-> easy to add more options later.
			
			ex)
				=======================================================
				public enum TemperatureScale { FAHRENHEIT, CELCIUS }

				void doSomething(TemperatureScale temperatureScale){
					...
				}

				// USE ENUM instead of boolean
				void doSomething(boolean isCelcius){
					if(isCelcius){
						...
					}else{
						...
					}
				}
				=======================================================




(Questions)
1. avoid long method names? not sure in Kotlin
2. convenience methods?
	-> intended to ease commonly performed tasks. (Method that makes things more convenient)
		ex) helper classes like "Collections", or Arrays
		ex) factory methods (Utility methods)
