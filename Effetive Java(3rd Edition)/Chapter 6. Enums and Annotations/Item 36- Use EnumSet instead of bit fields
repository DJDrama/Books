(Item 36: Use EnumSet instead of bit fields)
	- If the elements of an enumerated type are used primarily in sets, it is traditional to use the int enum pattern, assigning a different power of 2 to each constant:
		ex) 
			============================================================
			// Bit field enumeration constants - Obsolete!
			public class Text{
				public static final int STYLE_BOLD = 1 << 0; // 1
				public static final int STYLE_ITALIC = 1 << 1; // 2
				public static final int STYLE_UNDERLINE = 1 << 2; // 4
				public static final int STYLE_STRIKETHROUGH = 1 << 3; // 8

				// parameter is bitwise OR of zero or more STYLE_ constants
				public void applyStyles(int styles) { ... }
			}
			============================================================
			-> this representation lets you use the bitwise OR operation to combine several constants into a set, known as a bit field:
				ex)
					============================================================
					text.applyStyles(STYLE_BOLD | STYLE_ITALIC)
					============================================================
					-> the bit field representation also lets you perform set operations such as union and intersection efficiently using bitwise arithmetic.

					* BUT!
						-> bit fields have all the disadvantages of int enum constatns and more.
						-> it's harder to interpret a bit field than a simple int enum constant when it is printed as a number.
						-> there is no easy way to iterate over all of the elements represented by a bit field.
						-> you have to predict the maximum number of bits you'll ever need at the time you're writing the API and choose a type for the bit field accordingly.

	- java.util package provides the EnumSet class to efficiently represent sets of values drawn from a single enum type.
		-> EnumSet is represented as a bit vector.
		-> represented with a single long, so its performance is comparable to that of a bit field.

		ex)
			============================================================
			// EnumSet - a modern replacement for bit fields
			public class Text{
				public enum Style { BOLD, ITALIC, UNDERLINE, STRIKETHROUGH }

				// Any set could be passed in, but EnumSet is clearly best
				public void applyStyles(Set<Style> styles){ ... }
			}

			--> text.applyStyles(EnumSet.of(Style.BOLD, Style.ITALIC));
			============================================================
			-> "applyStyles" method taks a Set<Style> rather than an EnumSet<Style>
			-> good practice to accept the interface type rather than the implementation type.


	* Just because an enumerated type will be used in sets, there is no reason to represent it with bit fields.
	
