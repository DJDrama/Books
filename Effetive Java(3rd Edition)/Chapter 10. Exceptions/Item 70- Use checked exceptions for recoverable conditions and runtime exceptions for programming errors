Item 70: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors
	(Java exceptions)
		1) Checked Exceptions
		2) Runtime Exceptions
		3) Errors

	* Use checked exceptions for conditions from which the caller can reasonably be expected to recover.
		-> by throwing a checked exception, you force the caller to handle the exception in a catch clause or to propagate it outward.

	- two kinds of unchecked throwables;
		1) runtime exceptions
		2) errors

	* Use runtime exceptions to indicate programming errors.
		-> greate majority of runtime exceptions indicate "precondition violations"
		- "precondition violations"	
			-> a failure by the client of an API to adhere to the contract established by the API specification.
				ex) ArrayIndexOutOfBoundsException indicates that this precondition was violated.

	* all of the unchecked throwables you implement should subclass RuntimeException (directly or indirectly)
		-> Best not to implement any new "Error" classes, and AssertionError shouldn't be thrown.


	[Summary]
		- Throw checked exceptions for recoverable conditions
		- Throw unchecked exceptions for programming errors.
		- When doubt, throw unchecked exceptions.

		* Don't define any throwables that are neither checked exceptions nor runtime exceptions.
		* Provide methods on your checked exceptions to aid in recovery.

	