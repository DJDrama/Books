(Item 26: Donâ€™t use raw types)
	- Before generics, you had to cast every object you read from a collection.
		-> If someone accidentally inserted an object of the wrong type, casts could fail at runtime.
	- With generics, you tell the compiler what types of objects are permitted in each collection.
	- The compiler inserts casts for you automatically and tells you at compile time if you try to insert an object of the wrong type.
		-> safer, and clearer!


	=================================================================================================
	- generic class or interface
		-> a class or interface whose declaration has one or more type parameters
			ex) List interface has a single type parameter E, representing its element type.
				-> List<E>(read "list of E")

	- generic classes and interfaces are collectively known as generic types.

	- each generic type defines a set of parameterized types, which consist of the class or interface name followed by an angle-bracketed list of actual type parameters corresponding to the generic type's formal type parameters.
		ex)
			List<String> ("list of string") is a parameterized type representing a list whose elements are of type String.

	- each generic type defines a raw type, which is the name of the generic type used without any accompanying type parameters.
		ex) raw type corresponding to List<E> is List.

	* Don't do this!
		ex)
			================================================================================
			// Raw collection type

			// My stamp collection. Contains only Stamp instances.
			private final Collection stamps = ...;
			================================================================================
			-> erroneous insertion compiles and runs without error (though the compiler does emit a vague warning.)
				ex)
					================================================================================
					// Erroneous insertion of coin into stamp collection
					stamps.add(new Coin(...)); // Emits "unchecked call" warning
					================================================================================
						-> you don't get an error until you try to retrieve the coin from the stamp collection!
							ex)
								================================================================================
								// Raw iterator type - don't do this!
								for (Iterator i = stamps.iterator(); i.hasNext();){
									Stamp stamp = (Stamp) i.next(); // Throws ClassCastException
									stamp.cancel();
								}
								================================================================================

								* you don't discover the error until runtime, long after it has happened, and in code that may be distant from the code containing the error.

								* once you see the ClassCastException, you have to search through the codebase looking for the method invocation that put the coin into the stamp collection.

								* With generics, the type declaration contains the information, not the comment:
									ex)
										================================================================================
										// Parameterized collection type - typesafe
										private final Collection<Stamp> stamps = ...;
										================================================================================
										-> the compiler knows that stamps should contain only Stamp instances and guarantees it to be true, assuming your entire codebase compiles without emitting (or suppressing) any warnings.

	* If you use raw types, you lose all the safety and expressiveness benefits of generics.
		ex) List list = ...;

	- It is fine to use types that are parameterized to allow insertion of arbitrary objects, such as List<Object>.
	- Difference between List and List<Object>
		-> former has opted out of the generic type system, while the latter has explicitly told the compiler that it is capable of holding objects of any type.

	* You lose type safety if you use a raw type such as List, but not if you use a parameterized type such as List<Object>.
		ex)
			================================================================================
			// Fails at runtime - unsafeAdd method uses a raw type (List)!
			public static void main(String[] args){
				List<String> strings = new ArrayList<>();
				unsafeAdd(Strings, Integer.valueOf(42));
				String s = strings.get(0); // Has compiler-generated cast
			}
			private static void unsafeAdd(List list, Object o){
				list.add(o);
			}
			================================================================================
			-> this compiles, but because it uses the raw type List, you get a warning:
				================================================================================
				Test.java:10: warning: [unchecked] unchecked call to add(E) as a member of the raw type List
				list.add(o);
				^
				================================================================================
				-> you get a ClassCastException when the program tries to cast the result of the invocations strings.get(0), which is an Integer, to a String.

				* If you replace the raw type List with the parameterized type List<Object> in the unsafeAdd declaration and try to recompile the program, you'll find that it no longer compiles but emits the error messsage:
					================================================================================
					Test.java:5: error: incompatible types: List<String> cannot be converted to List<Object>
					unsafeAdd(strings, Integer.valueOf(42));
					^
					================================================================================

	- unbounded wildcard types <?>
		-> If you want to use a generic type but you don't know or care what the actual type parameter is, you can use a question mark instead!
			ex)
				Set<E> is Set<?> ("set of some type")
				-> capable of holding any set.
					ex)
						================================================================================
						// Uses unbounded wildcard type - typesafe and flexible
						static int numElementsInCommon(Set<?> s1, Set<?> set2) { ... }
						================================================================================
		- Difference between raw type Set and the unbounded wildcard type Set<?>
			-> wildcard type is safe and the raw type isn't.
			-> You can't put any element (other than null) into a Collection<?>.

	* You must use raw types in class literals!

	* Because generic type information is erased at runtime, it is illegal to use the instanceof operator on parameterized types other than unbounded wildcard types.
		-> This is the preferred way to use the instanceof operator with generic types:
			ex)
				================================================================================
				// Legitimate use of the raw type - instanceof operator
				if (o instanceof Set){ // Raw Type
					Set<?> s = (Set<?>) o; // Wildcard type
					...
				}
				================================================================================
				-> Once you determined that o is a Set, you must cast it to the wildcard type Set<?>, not the raw type Set.
				-> This is a checked cast, so it will not cause a compiler warning.

	[SUMMARY]
		(Safe)
		- Set<Object>: parameterized type representing a set that can contain objects of any type
		- Set<?>: wildcard type representing a set that can contain only objects of some unknown type

		(UnSafe)
		- Set: raw type, which opts out of the generic type system.

		Parameterized type 			List<String>
		Actual type parameter 		String
		Generic type 				List<E>
		Formal type parameter 		E
		Unbounded wildcard type 	List<?>
		Raw type 					List
		Bounded type parameter 		List<E extends Number>
		Recursive type bound 		<T extends Comparable<T>>
		Bounded wildcard type 		List<? extends Number>
		Generic method				static <E> List<E> asList(E[] a)
		Type token 					String.class




