(Item 3: Enforce the singleton property with a private constructor or an enum type)
 - singleton: simply a class that is instantiated exactly once.
 - Singletons typically represent either a stateless object such as a function or a system component that is intrinsically unique.

 * Making a class a singleton can make it difficult to test its clients
 	-> it's impossible to substitute a mock implementation for a singleton unless it implements an interface that serves as its type.

 - Common ways to implement singletons.
 	1) Singleton with public final field
 		===============================================================
 		public class Elvis {
 			public static final Elvis INSTANCE = new Elvis();
 			private Elvis(){ ... }
 			public void leaveTheBuilding(){ ... }
 		}
 		===============================================================
 		- the private constructor is called only once, to initialize the public static final field Elvis.INSTANCE.
 		- lack of a public or protected constructor guarantees a "monoelvistic" universe: exactly one Elvis instance will exist once the Elvis class is initialized - no more, no less.

 		* AccessibleObject.setAccessible method
 			-> defend against this attack, modify the constructor to make it throw an exception if it's asked to create a second instance.


 	2) Singleton with static factory
 		===============================================================
 		public class Elvis {
 			private static final Elvis INSTANCE = new Elvis();
 			private Elvis() { ... }
 			public static Elvis getInstance() { return INSTANCE; }
 			public void leaveTheBuilding() { ... }
 		}
 		===============================================================
 		- All calls to Elvis.getInstance return the same object reference, and no other Elvis instance will ever be created (with the same caveat mentioned above)
 			1. advantage of the public field approach is that the API makes it clear that the class is singleton: the public static field is final, so it will always contain the same object reference.
 			2. second advnatage is that it's simpler.

 		1. One advantage of the static factory approach is that it gives you the flexibility to change your mind about whether the class is a singleton without changing its API.
 		2. Second advnatage is that you can write a generic singleton factory if your app requires it.
 		3. final advntage of using a static factory is that a method reference can be used as a supplier, for example Elvis::instance is a Supplier<Elvis>.


	 	- To make a singleton class that uses either of these approaches serializable, it is not sufficient merely to add implements Serializable to its declaration.
	 	- To maintain the singleton guarantee, declare all instance fields transient and provide a readResolve method.
	 	- Otherwise, each time a serialized instance is deserialized, a new instance will be created, leading, in the case of our example, to spurious Elvis sightings.
	 	- To prevent this from happening, add this readResolve method to the Elvis class:
	 		===============================================================
	 		private Object readResolve(){
	 			// Return the one true Elvis and let the garbage collector
	 			// take care of the Elvis impersonator.
	 			return INSTANCE;
	 		}
	 		===============================================================

	3) Declare a single-element enum:
		===============================================================
		public enum Elvis{
			INSTANCE;
			public void leavetheBuilding(){ ... }
		}
		===============================================================		
		- Similar to the public field approach, but it is more concise, provides the serialization machinery for free, and provides an ironclad guarantee against multiple instantiation, even in the face of sophisticated serialization or reflection attacks.
		- single-element enum type is often the best way to implement a singleton.
			(You can't use this approach if your singleton must extend a superclass other than Enum(though you can declare an enum to implement interfaces.))