Item 42: Prefer lambdas to anonymous classes

	- "anonymous classes"
		-> adequte for the classic object-oriented design patterns requiring function objects, notably the Strategy pattern.

		* "Strategy Pattern" (aka Policy pattern)
			-> enables selecting an algorithm at runtime.

				ex) Collections.sort()
					-> Based on the different implementations of Comparator interfaces, the OBjects are getting sorted in different ways.

					(ref: https://www.digitalocean.com/community/tutorials/strategy-design-pattern-in-java-example-tutorial)

	* Comparator interface: "Abstract strategy" for sorting
	* "anonymous class": "Concrete strategy" for sorting strings.


	* "Functional interfaces"
		-> single abstract method.
		-> language allows you to create instances of these interfaces using "lambda expressions", or "lambdas" for short.

	* Lambda
		-> boilerplate is gone
		-> behavior is clearly evident
		-> "type inference" (in some cases, the compiler won't be able to determine the types, and you'll have to specify them.)

		* Omit the types of all lambda parameters unless their presence makes your program clearer.
			-> If the compiler generates an error telling it can't infer the type of a lambda, then specify it.

		* lack names and documentation; if a computation isn't self-explanatory, or exceeds a few lines, don't put it in a lambda. (one line is ideal for a lambda, and three lines is a reasonable maximum.)

	* In a lambda, the "this" keyword refers to the enclosing instance, which is typically what you want.
	* In an anonymous class, the "this" keyword refers to the anonymous class instance.

	* Lambda share with anonymous classes the property "you can't reliably serialize and deserialize them across implementation."
		--> "you should rarely, if ever, serialize a lambda" (or an anonymous class instance)

	* Don't use anonymous classes for function objects unless you have to create instances of types that aren't functional interfaces.

