(Item 24: Favor static member classes over nonstatic)
	- nested class: class defined within another class.

	- nested class should exist only to serve its enclosing class.
	- If a nested class would be useful in some other context, then it should be a top-level class.

	- 4 kinds of nested classes
		1. static member classes
		2. nonstatic member classes
		3. anonymous classes
		4. local classes

		-> the first kind are known as inner classes.

		1) static member class
			- simplest kind of nested class.
			- static member class is a static member of its enclosing class and obeys the same accessibility rules as other static members.
				-> if it is declared private, it is accesible only within the enclosing class, and so forth.

				-> one common use of a static member class is as a public helper class, useful only in conjunction with its outer class.
					ex) enum describing the operations supported by a calculator.
						-> The Operation enum should be a public static member class of the Calculator class.
						-> Clients of Calculator could then refer to operations using names like
							Calculator.Operation.PLUS
							Calculator.Operation.MINUS
			* difference between static and nonstatic member classes
				-> static member classes have the modifier static in their declarations.
				-> each instance of a nonstatic member class is implicitly associated with an enclosing instance of its containing class.

		2) nonstatic member class
			-> common use of it is to define and Adapter that allows an instance of the outer class to be viewed as an instance of some unrelated class.
				ex) implementations of the Map interface typically use nonstatic member classes to implement their collectino views,
					which are returned by Map's keySet, entrySet, and values methods.

					ex)
						======================================================
						// Typical use of a nonstatic member class
						public class MySet<E> extends AbstractSet<E>{
							... // Bulk of the class omitted

							@Override
							public Iterator<E> iterator(){
								return new MyIterator();
							}

							private class MyIterator implements Iterator<E> {
								...
							}
						}
						======================================================
						* If you declare a member class that does not require access to an enclosing instance, always put the static modifier in its declaration, making it a static rather than a nonstatic member class.

			* common use of private static member classes
				-> to represent components of the object represented by their enclosing class
					ex) Map instance
						-> Many Map implementatinos have an internal Entry object for each key-value pair in the map.
						-> while each entry is associated with a map, the methods on an entry (getKey, getValue, and setValue) do not need access to the map.
							-> therefore, it would be wasteful to use a nonstatic member class to represent entires: a private static member class is best.

		3) anonymous class
			-> you can't perform instanceof test or do anything else that requires you to name the class.
			-> anonymous classes were the preferred means of creating small function objects and process objects on the fly -> but lambdas are now preferred.
			-> common use: implementation of static factory methods (see intArrayAsList)

		4) Local classes
			-> least frequently used of nested classes.
			