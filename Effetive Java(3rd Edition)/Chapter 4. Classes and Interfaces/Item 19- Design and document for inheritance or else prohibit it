(Item 19: Design and document for inheritance or else prohibit it)
	- a class to be designed and documented for inheritance
		1. the class must document its self-use of overridable methods.
			- by overridable, we mean nonfinal and either public or protected.
				ex) java.util.AbstractCollection
					==========================================
					public boolean remove(Object o)
					==========================================
					-> removes a single instance of the specified element from the collection.

					* Implementation Requirements
						- implementation iterates over the collection looking for the specified element.
						- it removes the element from the collection using the iterator's remove method.
						- throws an UnsupportedOperationException if the iterator returned by this collection's iterator method does not implement the remove method and this collection contains the specified object.

			* good API documentation should describe what a given method does and not how it does it?
				-> this violates encapsulation(inheritance violates encapsulation)

				@implSpec tag: added in Java 8 and used heavily in Java 9.
					-> enabled by default

	- Desgining for inheritance involves more than just documenting patterns of self-use.
	- a class may have to provide hooks into its internal workings in the form of judiciously chosen protected methods or, in rare instances, protected fields.
		ex) consider the removeRange method from java.util.AbstractList:
			====================================================================================
			protected void removeRange(int fromIndex, int toIndex)
			====================================================================================
			-> removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.
			-> method is called by the clear operation on this list and its sublists.

			* without removeRange method, subclasses would have to make do with quadratic perforamnce when the clear method was invoked on sublists or rewrite the entire subList mechanism from scratch not an easy task!


	* The only wat to test a class designed for inheritance is to write subclasses.
	* you must test your class by writing subclasses before you release it.

	* Constructors must not invoke overridable methods, directly or indirectly.
		-> superclass constructor runs before the subclass constructor, so the overriding method in the subclass will get invoked before the subclass constructor has run.
			ex) class that violates this rule:
				====================================================================================
				public class Super{
					// Broken - constructor invokes an overridable method
					public Super(){
						overrideMe();
					}

					public void overrideMe(){

					}
				}
				====================================================================================

				====================================================================================
				public final class Sub extends Super {
					// Blank final, set by constructor
					private final Instant instant;

					Sub(){
						instant = Instant.now();
					}

					// Overriding method invoked by superclass constructor
					@Override public void overrideMe(){
						System.out.println(instant);
					}

					public static void main(String[] args){
						Sub sub = new Sub();
						sub.overrideMe();
					}
				}
				====================================================================================
				-> prints null at first because overrideMe is invoked by the Super constructor before the Sub constructor has a change to initialize the instant field.
				-> Also throws a NullPointerException when the Super constructor invoked overrideMe.
					(But, println method tolerates null parameters so exception won't be thrown.)

	- Cloneable and Serializable interfaces present special difficulties when designing for inheritance.
		* not a good idea for a class designed for inheritance to implement either of these interfaces because they place a substantial burden on programmers who extend the class.

		* readObject: overriding method will run before the subclass's state has been deserialized.
		* clone: overriding method will run before the subclass's clone method has a chance to fix the clone's state.

	* designing a class for inheritance requires greate effor and places substantial limitations on the class!

	* The best solution to this problem is to prohibit subclassing in classes that are not designed and documented to be safely subclassed.
		-> 2 ways to prohibit subclassing.
			1. declare the class final.
			2. make all the constructors private or package-private and to add public static factories in place of the constructors.

	













