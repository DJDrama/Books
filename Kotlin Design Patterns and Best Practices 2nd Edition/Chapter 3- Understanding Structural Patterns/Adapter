[Adapter]

	- Main goal: Convert one interface to another interface.

	Ex)
		======================================================================
		interface USPlug {
		    val hasPower: Int
		}

		interface EUPlug {
		    val hasPower: String // "TRUE" or "FALSE"
		}

		interface UsbMini {
		    val hasPower: Power
		}

		enum class Power {
		    TRUE, FALSE
		}

		interface UsbTypeC {
		    val hasPower: Boolean
		}

		fun cellPhone(chargeCable: UsbTypeC) {
		    if (chargeCable.hasPower)
		        println("I've got the power!")
		    else
		        println("No power")
		}

		fun usPowerOutlet(): USPlug {
		    return object : USPlug {
		        override val hasPower: Int = 1
		    }
		}

		fun charger(plug: EUPlug): UsbMini {
		    return object : UsbMini {
		        override val hasPower: Power = Power.valueOf(plug.hasPower)
		    }
		}

		/*
		Type mismatch.
			Required:
				UsbTypeC
			Found:
				UsbMini
		Type mismatch.	
			Required:
				EUPlug
			Found:
				USPlug
		*/
		fun main() {
		    cellPhone(chargeCable = charger(plug = usPowerOutlet()))
		}
		======================================================================
		
	(Adapting exsiting code)
		- two types of adapters
			1. one for our power plugs
			2. another one for our USB ports.

		- In Kotlin, we can make "extension functions".

		ex) Use of extension functions.
			======================================================================
			fun main() {
			    cellPhone(chargeCable = 
			    	charger(plug = 
			    			usPowerOutlet().toEUPlug()
			    		).toUsbTypeC()
		    	)
			}

			fun USPlug.toEUPlug(): EUPlug {
			    val hasPower = if (this.hasPower == 1) "TRUE" else "FALSE"
			    return object : EUPlug {
			        override val hasPower: String = hasPower
			    }
			}

			fun UsbMini.toUsbTypeC(): UsbTypeC {
			    val hasPower = this.hasPower == Power.TRUE
			    return object : UsbTypeC {
			        override val hasPower: Boolean = hasPower
			    }
			}
			======================================================================

	(Examples in real life)
		- "toTypedArray()": converts a list to an array. (List: interface, Array: interface)
		
