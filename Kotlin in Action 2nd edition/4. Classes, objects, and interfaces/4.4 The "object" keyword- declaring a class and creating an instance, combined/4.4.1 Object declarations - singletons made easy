4.4.1 Object declarations: singletons made easy

	- Singleton pattern
		-> Kotlin provides first-class language support for this using the "object" declaration feature.
		-> "object" declaration
			1. combines a class declaration
			2. declaration of a single instance of that class.

	- just like a class, an object declaration can contain
		1. declarations of properties
		2. methods
		3. initializer blocks, and so on.

	* constructors aren't allowed

	* "object" is created immediately at the point of definition, not through constructor calls from other places in the code.
		-> thus, defining a constructor for an object declaration doesn't make sense.

	- Object declarations can also inherit from classes and interfaces.
		-> useful when the framework you're using requires you to implement an interface, but your implementation doesn't contain any state.

			ex) Comparator implementation
				============================================================
				object CaseInsensitiveFileComparator: Comparator<File> {
					override fun compare(file1: File, file2: File): Int{
						return file1.path.compareTo(file2.path, ignoreCase=true)
					}
				}

				fun main(){
					println(
						CaseInsensitiveFileComparator.compare(
							File("/User"), File("/user")
						)
					)
				}
				============================================================

	- object declarations aren't always ideal for use in large sw systems.
		-> they are great in small pieces of code that have few or no dependencies, but not for large components that interact with many other parts of the system.

		* Main reason : you don't have any control over the instantiation of objects, and you can't specify parameters for the constructors.
		