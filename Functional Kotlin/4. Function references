[Function references]
	
	(Top-level functions references)
		- we use :: and a function name to reference a top-level function.
		- Function references are part of the Kotlin refelection API and support introspection.

		- "kotlin-reflect" dependency
			-> we can use a function reference to check if the referenced function has the open modifier, what annotation it has, etc.

			ex)
				============================================
				fun add(a: Int, b: Int) = a + b

				fun main(){
				    val f = ::add
				    println(f.isOpen) // false
				    println(f.visibility) // PUBLIC
				}
				============================================

		- function references also implement function types and can be used as function literals.
			-> no performance overhead compared to lambda expressions.
				(the reference needs to be immediately typed as a function type)

			ex)
				============================================
				fun add(a: Int, b: Int) = a + b

				fun main(){
				    val f = ::add
				    println(f(10, 20)) // 30
				}
				============================================

	(Method references)

		ex)
			=====================================================================
			data class Complex(
			    val real: Double,
			    var imaginary: Double
			) {
			    fun doubled() = Complex(this.real * 2, this.imaginary * 2)
			    fun times(num: Int) = Complex(real * num, imaginary * num)
			}


			fun main(){
			    val c1 = Complex(1.0, 2.0)

			    val f1: (Complex) -> Complex = Complex::doubled
			    println(f1(c1)) // Complex(real=2.0, imaginary=4.0)

			    val f2: (Complex, Int) -> Complex = Complex::times
			    println(f2(c1, 4)) // Complex(real=4.0, imaginary=8.0)
			}
			=====================================================================

	(Extension function references)
		ex)
			=====================================================================
			data class Complex(
			    val real: Double,
			    var imaginary: Double
			)

			fun Complex.doubled() = Complex(this.real * 2, this.imaginary * 2)
			fun Complex.times(num: Int) = Complex(real * num, imaginary * num)


			fun main() {
			    val c1 = Complex(1.0, 2.0)

			    val f1: (Complex) -> Complex = Complex::doubled
			    println(f1(c1)) // Complex(real=2.0, imaginary=4.0)

			    val f2: (Complex, Int) -> Complex = Complex::times
			    println(f2(c1, 4)) // Complex(real=4.0, imaginary=8.0)
			}
			=====================================================================


	(Method references and generic types)
		- we reference on type, not a property.

		- when reference a method from a generic class, its type arguments need to be explicit.
			ex)
				=================================================================
				class Box<T>(private val value: T) {
				    fun unbox(): T = value
				}

				fun main() {
				    val unbox = Box<String>::unbox
				    val box = Box("AAA")
				    println(unbox(box)) // AAA
				}
				=================================================================

	(Bounded function references)
		- we can reference a method on an object instance. (Bounded function references)
			ex)
				=================================================================
				data class Number(val num: Int){
				    fun toFloat(): Float = num.toFloat()
				    fun times(n: Int): Number = Number(num*n)
				}

				fun main(){
				    val num = Number(10)
				    val getNumAsFloat: ()-> Float = num::toFloat
				    println(getNumAsFloat()) // 10.0

				    val multiplyNum: (Int) -> Number = num::times
				    println(multiplyNum(4)) // Number(num=40)
				}
				=================================================================

	(Constructor references)

	(Function overloading and references)

	(Property references)

	





















