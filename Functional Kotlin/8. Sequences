Sequences
	- when using list, allocating heavy list in memory is not only a cost, but also leads to the risk of OutOfMemoryError.

		ex)
			=============================================
			val size = File("huge.file")
				.readLines()
				.sumOf { it.length }
			=============================================

	- "useLines"
		-> reads and processes the file line by line.
		-> faster, safer for our memory

		ex)
			=============================================
			val size = File("huge.file")
				.useLines { s ->
					s.sumOf { it.length }
				}
			=============================================

	(what is a sequence?)
		* sequenes are lazy, so intermediate functions for "Sequence" processing don't do any calculations.
			-> they return a new Sequence that decorates the previous one with a new operation.

		* All these computations are evaluated during terminal operations like "toList()", or "count()".

		* collection processing functions are eager
			-> immediately perform all operations and return a new collection (typically a List).

			ex)
				====================================================
				public inline fun <T> Iterable<T>.filter(
					predicate: (T) -> Boolean
				): List<T> {
					return filterTo(ArrayList<T>(), predicate)
				}

				public inline fun <T> Sequence<T>.filter(
					predicate: (T) -> Boolean
				): List<T> {
					return FilteringSequence(this, true, predicate)
				}
				====================================================

		* collection processing operations are invoked as soon as they are used.

		* Sequence processing functions are not invoked until a terminal operation is invoekd.
			-> "filter" is an intermediate operation for Sequence, so no calculations
			-> it decorates the sequence with the new processing step.

			-> calculations are done in a terminal operation like "toList()".

			ex)
				====================================================
				sequence.map { ... }.filter { ... }.toList()
				====================================================
				+ map: intermediate operation
				+ filter: intermediate operation

				+ toList: terminal operation

			ex)
				================================================================================
				fun main() {
				    val seq = sequenceOf(1, 2, 3)
				    val filtered = seq.filter {
				        print("F$it ");
				        it % 2 == 1
				    }
				    println(filtered) // kotlin.sequences.FilteringSequence@5f184fc6

				    val asList = filtered.toList()
				    println(asList) // F1 F2 F3 [1, 3]

				    val list = listOf(1, 2, 3)
				    val listFiltered = list
				        .filter {
				            print("f$it ");
				            it % 2 == 1
				        }
				    println(listFiltered) // f1 f2 f3 [1, 3]
				}
				================================================================================

	(Order is important)
		* During sequence processing, we take the first element and apply all the operations to it, then we process the next element, and so on. (element-by-element or lazy order)

			ex)
				================================================================================
				fun main() {
				    sequenceOf(1, 2, 3)
				        .filter {
				            print("F$it, ");
				            it % 2 == 1
				        }
				        .map {
				            print("M$it, ");
				            it * 2
				        }
				        .forEach {
				            print("E$it, ")
				        }
				    // F1, M1, E2, F2, F3, M3, E6
				}
				================================================================================

	(Sequences do the minimum number of operations)
		- if we have millions of elements, and just need first 10 elements, we can use a sequence!
			-> do the minimum number of operations required to get the result.

			ex)
				================================================================================
				fun main() {
				    val resI = (1..10).asIterable()
				        .map {
				            print("M$it ");
				            it * it
				        }
				        .find {
				            print("F$it ");
				            it > 3
				        }
				    println(resI) // M1 M2 M3 M4 M5 M6 M7 M8 M9 M10 F1 F4 4

				    val resS = (1..10).asSequence()
				        .map {
				            print("M$it ");
				            it * it
				        }
				        .find {
				            print("F$it ");
				            it > 3
				        }
				    println(resS) // M1 F1 M2 F4 4
				}
				================================================================================

		* Sequences do not store any data because they are not designed to do so.
		* Whenever we call another terminal operation on this sequence, the elements are processed again.

	(Sequences can be infinite)
		- two most important functions that are used to create an infinite sequence are
			1) generateSequence
			2) sequence

		1) generateSequence
			-> taks as arguments the first element (seed) and a function that specifies how to calculate the next element.

				ex) seed : first element
					================================================================================
					fun main() {
					    generateSequence(seed = 1) { it + 1 }
					        .map { it * 2 }
					        .take(10)
					        .forEach {
					            print("$it, ")
					        }
					        // 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 
					}
					================================================================================

		2) sequence
			-> uses a suspending function that generates the next number on demand.
			-> whenever we ask for the next number, the sequence builder runs until a value is yielded with "yield".
			-> the execution then will be suspended until we ask for another number.

				ex) Fibonacci numbers
					================================================================================
					import java.math.BigInteger

					val fibonacci: Sequence<BigInteger> = sequence {
					    var current = 1.toBigInteger()
					    var prev = 0.toBigInteger()
					    yield(value = prev)
					    while (true) {
					        yield(current)
					        val temp = prev
					        prev = current
					        current += temp
					    }
					}

					fun main() {
					    print(fibonacci.take(10).toList()) // [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
					}
					================================================================================
					* "fibonacci.toList()" will run forever!!
						-> infinite sequences need to be processed, so their number of elements is limited.
						-> we cannot consume a sequence infinitely.

			* we either need to limit the sequences using an operation such as "take", or we need to use a terminal operation that does not need to perform all elements, such as "first", "find", or "indexOf".

			* "any", "all", "none" should not be used without being limited at first.
				-> "any" without a predicate can only return true or run forever.
				-> "all" and "none" can only return false.

	(Sequences do not create collections at every processing step)
		* Files can weigh gigabytes.
			-> Allocating all the data in a collection at every processing step would be a huge waste of memory.

		* Prefer to use Sequences for big collections with more than one processing step.

		- by one processing step, almost no difference, and simple list processing is faster because its "filter" function is inlined.
			
			ex)
				================================================================================
				fun singleStepListProcessing(): List<Product> {
					return productsList.filter { it.bought }
				}

				fun singleStepSequenceProcessing(): List<Product> {
					return productsList.asSequence()
						.filter { it.bought }
						.toList()
				}
				================================================================================

		- BUT! more than one processing step, the difference will be appreciable for bigger collections.

			ex)
				================================================================================
				fun multipleStepsListProcessing(): List<ProductDto> {
					return productsList
						.filter { it.bought }
						.map { it.productDto() }
				}

				fun multipleStepsSequenceProcessing(): List<ProductDto> {
					return productsList.asSequence()
						.filter { it.bought }
						.map { it.productDto() }
						.toList()
				}
				================================================================================

	(When aren't sequences faster?)
		- "sorted", "shuffled"
			-> it accumulates the Sequence into List and then uses "sort" from Java stdlib.

			* "accumulation" process takes some additional time compared to a "Collection"

		- "sorted" for "Sequence" is controversial
			-> because of lazy calculations.

		* "sorted" function is a rare example of a processing step that is faster on "Collection" than on "Sequence".

	
	(What about Java streams?)
		* Three differences between Java stream and Kotlin sequences:
			
			1) Kotlin sequences have a lot of processing methods, and easier to use.

			2) Java stream processing can be started in parallel mode using a parallel function.
				-> However, it has known pitfalls.
					1. common join-fork thread pool they use, which allows one process to block another.
					2. single-element processing blocks other elements.

			3) Sequence is available on all Kotlin targets (Kotlin/JVM, Kotlin/JS, and Kotlin/Native) and in common modules, while Java streams require Java 8+ JVM.


	(Kotlin Sequence debuggin)
		- Kotlin Sequences require a plugin named "Kotlin Sequence Debugger"
			-> Now integrated into the offical Kotlin Plugin.

	(Summary)
		- Advantages of Sequences

			1) They keep the natural order of operations.
			2) They perform the minimum number of operations.
			3) They can be infinite.
			4) They do not create intermediate collections at every step.
			

