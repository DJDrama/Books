[36 I/O Devices]

(36.2 A Canonical Device)
	
	- device has two important components.
		1) hardware "interface"
			-> hardware must also present some kind of interface that allows the system software to control its operation.
			-> all devices have some specified interface and protocol for typical interaction.

			ex) Registers, Status, Command, Data

		2) "internal structure"
			-> implementation specific and is responsible for implementing the abstraction the device presents to the system.

			ex) Micro-controller(CPU), Memory(DRAM or SRAM or both), Other Hardware-specific chips


(36.3 The Canonical Protocol)
	
	- device interface is comprised of three registers.
		1) "status" register
			-> which can be read to see the current status of the device

		2) "command" register
			-> tell the device to perform a certain task

		3) "data" register
			-> pass data to the device, or get data from the device

		* by reading and writing these registers, the operating system can control device behavior.


	- the protocl has four steps
		1) the OS waits until the device is ready to receive a command by repeatedly reading the status register.
			-> we call this "polling" the device (basically, just asking it what is going on)

		2) the OS sends some data down to the data register
			* when the main CPU is involved with the data involvement, we refer to it as "programmed I/O" (PIO).

		3) the OS writes a command to the command register
			-> lets the device know that both the data is present and that it should begin working on the command.

		4) the OS waits for the device to finish by again polling it in a loop, waiting to see if it is finished.


(36.4 Lowering CPU Overhead With Interrupts)
	
	- "interrupt"
		-> instead of polling the device repeatedly, the OS can issue a request, put the calling process to sleep, and context switch to another task.

		ex)
			+ when the device is finally finished with the operation, it will raise a hardware interrupt, causing the CPU to jump into the OS at a pre-determined "interrupt service routine" (ISR) or more simply an "interrupt handler".
				-> the handler is just a piece of operating system code that will finish the request and wake the process waiting for the I/O, which can then proceed as desired.

		* cost of interrupt handling and context switching may outweigh the benefits interrupts provide. (flood of interrupts may overload a system and lead it to livelock.)

		* if a device is fast, it may be best to poll; if it is slow, interrupts, which allow overlap, are best.

		* if the speed of the device is not known, it may be best to use a "hybrid"
			-> polls for a little while and then, if the device is not yet finished, uses interrupts.

		* in Networks, huge stream of incoming packets each generate an interrupt, it is possible for the OS to livelock.
			-> never allowing a user-level process to run and actually service the requests.

	- "coalescing" (Another interrupt-based optimization)
		-> a device which needs to raise an interrupt first waits for a bit before delivering the interrupt to the CPU.
		-> while waiting, other requests may soon complete, and thus multiple interrupts can be coalesced into a single interrupt delivery, lowering the overhead of interrupt processing.


(36.5 More Efficient Data Movement With DMA)
	
	- With PIO(Programmed I/O), the CPU spends too much time moving data to and from devices by hand.
		(How can we offload this work and thus allow the CPU to be more effectively utilized?)
			-> "Direct Memory Access" (DMA)
				+ the OS would program the DMA engine by telling it where the data lives in memory, how much data to copy, and which device to send it to.

				+ when the DMA is complete, the DMA controller raises an interrupt, and the OS thus knows the transfer is complete.


(36.7 Fitting Into The OS The Device Driver)
	
	- "abstraction"
		-> keep most of the OS device-neutral, hiding the details of device interactions from major OS subsystems.

	- "device driver"
		-> At the lowest level, a piece of software in the OS must know in detail how a device works.
		-> any specifics of device interaction are encapsulated within.

	

