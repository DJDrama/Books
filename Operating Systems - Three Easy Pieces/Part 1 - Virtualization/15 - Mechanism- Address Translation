[15 - Mechanism: Address Translation]
	- "limited direct execution" (LDE)
		-> let the program run directly on the hardware; however, at certain key points in time, arrange so that the OS gets involved and makes sure the "right" things happen.

	- "hardware-based address translation" ("address translation")
		-> hardware transforms each memory access, changing the virtual address provided by the instruction to a "physical" address where the desired info is actually located.

	* on each, every memory reference, an address translation is performed by the hardware to redirect application memory references to their actual locations in memory.

(15.1 Assumptions)
	1) we will assume that tue user's address space must be placed "contiguously" in physical memory.

	2) will also assume, for simplicity, that the size of address space is not too big; specifically, that it is less than the size of physical memory.

	3) will also assume that each address space is exactly the same size.

(15.2 An Example)
(15.3 Dynamic (Hardware-based) Relocation)
	- "base" register", "bounds"("limit" register)

	- when a program starts running, the OS decides where in physical memory it should be loaded and sets the base register to that value.

	* Each memory reference generated by the process is a "virtual address"; the hardware in turn adds the contents of the base register to this address and the result is a "physical address" that can be issued to the memory system.

	- the hardware takes a virtual address the process thinks it is referencing and transforms it into a physical address which is where the data actually resides.

	- relocation of the address happens at "runtime"
		-> "dynamic relocation".

	- "bounds" register is there to help with protection.
		-> processor will first check that the memory reference is "within bounds" to make sure it is legal;

	- "memory management unit" (MMU)
		-> part of the processor that helps with address translation.

(15.4. Hardware Support: A Summary)
	- OS runs in "privileged mode" (or "kernel mode")
		-> has access to the entire machine; applications run in "user mode", where they are limited in what they can do.

	- A single bit, perhaps stored in some kind of "processor status word", indicates which mode the CPU is currently running in; upon certain special occasions, the CPU switches modes.

	- hardware must also provide the "base and bounds registers" themselves; each CPU thus has an additional pair of registers, part of the "memory management unit"(MMU) of the CPU.
		-> when a user programming is running, the hardware will translate each address, by adding the base value to the virtual address generated by the user program.

		-> hardware must also be able to check whether the address is valid, which is accomplished by using the bounds register and some circuitry within the CPU.

	- hardware should provide special instructions to modify the base and bounds registers, allowing the OS to change them when different processes run.
		-> these instructions are "privileged".

	- CPU must be able to generate "Exceptions" in situations where a user program tries to access memory illegally (with an address that is "out of bounds").
		-> CPU should stop executing the user program and arrange for the OS "out-of-bounds" exception handler to run.

		-> if a user program tires to change the values of the base and bounds registers, the CPU should raise an exception and run the "tried to execute a privileged operation while in user mode" handler.

(15.5 Operating System Issues)
	1) First, the OS must take action when a process is created, finding space for its address space in memory.
		-> when a new process is created, the OS will have to search a data structure to find room for the new address space and then mark it used.

	2) the OS must do some work when a process is terminated when it exits gracefully, or is forcefully killed because it misbehaved.
		-> reclaiming all of its memory for use in other processes or the OS.
		-> OS puts its memory back on the free list, and cleans up any associated data structures as need be.

	3) OS must also perform a few additional steps when a context switch occurs.
		-> OS must save and restore the base-and-bounds pair when it switches between processes.

	4) OS must provide "Exception handlers", or functions to be called.
		-> OS installs these handlers at boot time.
		ex)
			+ If a process tries to access memory outside its bounds, the CPU will raise an exception; the OS must be prepared to take action when such an exception arises.