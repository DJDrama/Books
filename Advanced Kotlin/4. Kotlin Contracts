[Kotlin Contracts]

	(The meaning of a contract)
		- require: validation of arguments
		- check: state of arguments

	(How many times do we invoke a function from an argument?)
		- InvocationKind
			1. EXACTLY_ONCE
				-> function will be called exactly once.
			2. AT_MOST_ONCE
				-> function will be called at most once.
			3. AT_LEAST_ONCE
				-> function will be called at least once.
			4. UNKNOWN
				-> does not specify the number of function invocations.

		- "callsInPlace"
			-> information to the compiler, which can use this information in a range of situations.

	(Implications of the fact that a function has returned a value)
		ex) compiler can infer that the receiver is of type "Loading" because "startedLoading" returns true.
			========================================================================
			@OptIn(ExperimentalContracts::class)
			fun VideoState.startedLoading(): Boolean {
			    contract {
			        returns(true) implies (this@startedLoading is Loading)
			    }
			    return this is Loading && this.progress > 0
			}
			========================================================================

	(Using contracts in practice)
		ex)
			========================================================================
			@OptIn(ExperimentalContracts::class)
			suspend fun measureCoroutineDuration(
			    body: suspend () -> Unit
			): Duration {
			    contract {
			        callsInPlace(body, InvocationKind.EXACTLY_ONCE)
			    }
			    val dispatcher = coroutineContext[ContinuationInterceptor]
			    return if (dispatcher is TestDispatcher) {
			        val before = dispatcher.scheduler.currentTime
			        body()
			        val after = dispatcher.scheduler.currentTime
			        after - before
			    } else {
			        measureTimeMillis {
			            body()
			        }
			    }.milliseconds
			}

			@OptIn(ExperimentalContracts::class)
			suspend fun <T> measureCoroutineTimedValue(
			    body: suspend () -> T
			): TimedValue<T> {
			    contract {
			        callsInPlace(body, InvocationKind.EXACTLY_ONCE)
			    }
			    var value: T
			    val duration = measureCoroutineDuration {
			        value = body()
			    }
			    return TimedValue(value, duration)
			}
			========================================================================

		ex) Needs contract for "val", so that "val" is initialized only once!
			========================================================================
			fun main(args: Array<String>) {
			    runTest {
			        val result: String
			        val duration = measureCoroutine {
			            delay(1000)
			            result = "OK"
			        }
			        println(duration) // 1000 ms
			        println(result) // OK
			    }

			    runBlocking {
			        val result: String
			        val duration = measureCoroutine {
			            delay(1000)
			            result = "OK"
			        }
			        println(duration) // 1000 ms
			        println(result) // OK
			    }
			}

			@OptIn(ExperimentalContracts::class, ExperimentalCoroutinesApi::class)
			suspend fun measureCoroutine(body: suspend () -> Unit): Duration {
			    contract {
			        callsInPlace(body, InvocationKind.EXACTLY_ONCE) // NEED THIS FOR 'val'
			    }
			    val dispatcher = coroutineContext[ContinuationInterceptor]
			    return if (dispatcher is TestDispatcher) {
			        val before = dispatcher.scheduler.currentTime
			        body()
			        val after = dispatcher.scheduler.currentTime
			        after - before
			    } else {
			        measureTimeMillis {
			            body()
			        }
			    }.milliseconds
			}
			========================================================================
