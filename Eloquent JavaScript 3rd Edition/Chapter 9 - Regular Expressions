(Chapter 9 - Regular Expressions)

	[Creating a Regular Expression]
		- can be constructed with the RegExp constructor or written as a literal value by enclosing a pattern in forward slash (/) characters.

			ex)
				=======================================
				let re1 = new RegExp("abc");
				let re2 = /abc/;
				=======================================

	[Testing for Matches]
		- "test"
			-> return a Boolean telling you whether the string contains a match of the pattern in the expression.

			ex)
				=======================================
				console.log(/abc/.test("abcde"));
				// true

				console.log(/abc/.test("abxde"));
				// false
				=======================================

	[Sets of Characters]
		- putting a set of characters between square brackets makes that part of the expression match any of the characters between the brackets.
			ex)
				=======================================
				console.log(
					/[0123456789]/.test("in 1992")
				); 
				// true

				console.log(/[0-9]/.test("in 1992"));
				// true

				console.log(/[0-9]/.test("in"));
				// false
				=======================================

			ex) shortcuts
				=======================================
				\d : Any digit character
				\w : An alphanumeric character
				\s : Any whitespace character
				\D : A character that is not a digit
				\W : A nonalphanumeric character
				\S : A nonwhitespace character
				.  : Any character except for newline
				=======================================

		- To invert a set of characeters - that is, to express that you want to match any character except the ones in the set - you can write a caret (^) character after the opening bracket.

			ex)
				=======================================
				let nonBinary = /[^01]/
				console.log(
					notBinary.test("1100100010100110")
				);
				// false

				console.log(
					notBinary.test("1100100010200110")
				);
				// true
				=======================================
				+ /[^01]/ : matches any single character that is not a 0 or 1.

	[Repeating Parts of a Pattern]
		- when you put a plus sign (+) after something in a regular expression, it indicates that the element may be repeated more than once.

			ex)
				=======================================
				console.log(/'\d+'/.test("'123'"));
				// true

				console.log(/'\d+'/.test("''"));
				// false
				=======================================

		- The star (*) has a similar meaning but also allows the pattern to match zero times.

			ex)
				=======================================
				console.log(/'\d*'/.test("'123'"));

				console.log(/'\d*'/.test("''"));
				=======================================

		- Braces {4} (Indicate a pattern should occur a precise number of times)
			-> exactly four times.

			+ {2, 4}
				-> at least twice and at most four times.

			ex)
				====================================================================
				let dateTime = /\d{1,2}-\d{1,2}-\d{4} \d{1,2}:\d{2};
				console.log(dateTime.test("1-30-2003 8:45"));
				// true
				====================================================================

			+ {5,}
				-> at least five or more times

	[Grouping SubExpressions]
		- use parentheses
			-> to use an operator like * or + on more than one element at a time

			ex)
				====================================================================
				let cartoonCrying = /boo+(hoo+)+/i;
				console.log(cartoonCrying.test("Boohoooohoohoooo"));
				// true
				====================================================================
				(hoo+) : matching one or more sequences like that
				i : case insensitive (uppercase B)

	[Matches And Groups]
		- "exec" (execute)
			-> return "null" if no match was found and return an object with information about the match otherwise.

			ex)
				====================================================================
				let match = /\d+/.exec("one two 100");
				console.log(match);
				// ["100"]

				console.log(match.index);
				// 8
				====================================================================

		- "match" for String values
			
			ex)
				====================================================================
				console.log("one two 100".match(/\d+/));
				// ["100"]
				====================================================================

			* the whole match is always the first element.

			ex)
				====================================================================
				let quotedText = /'([^']*)'/;
				console.log(quotedText.exec("she said 'hello'"));
				// ["'hello'", "hello"]
				====================================================================

	[The Date Class]

		- month starts at zero (11 = December)

		- getTime() returns the current millisecond

		- getFullYear, getMonth, getDate, getHours, getMinutes, and getSeconds to extract components.

		- getYear
			-> gives you the year minus 1900 (98 or 119) - mostly useless.

