(Chapter2 - Program Structure)
	
	[Expressions and Statements]
		- "expression"
			-> a fragment of code that produces a value.
			-> sentence fragment

		- "statement"
			-> full sentence
			-> A program is a list of statements.

		- "side effects"
			-> changing the world
			-> change the internal state of the machine in a way that will affect the statements that come after it.

		- "ASI" (Automatic Semicolon Insertion)
			-> JavaScript has a feature called "ASI"
			-> allows the interpreter to automatically insert semicolons in certain situations where they are omitted at the end of a line.

	[Bindings]
		- "bindings"
			-> they do not "contain" values; they "grasp" them.

	[Binding Names]
		- name must not start with a digit.
		- may include dollar signs($) or underscores(_) but no other punctuation or special characters.

		- "let" <-- keyword

		- should not use "keywords" as a binding name
			ex)
				============================================
				break case catch class const continue
				debugger default delete do else enum
				export extends false finally or function if
				implements import interface in instanceof
				let new package private protected public
				return static super switch this throw true
				try typeof var void while with yield
				============================================

	[The Environment]
		- "environment"
			-> the collection of bindings and their values that exist at a given time is called the "environment."

			-> when a program starts up, this environment is not empty.

	[Functions]
		- "function"
			-> is a piece of program wrapped in a value.

		- executing a function is called "invoking", "calling", or "applying" it.

		* The "prompt" function isn't used much in modern web programming
			-> you have no control over the way the resulting dialog looks.

	[The console.log Function]
		- an expression that retrieves the "log" property from the value held by the console binding.

	[Return Values]
		- Showing a dialog box or writing text to the screen is a "side effect".

		* Anything that produces a value is an expression in JavaScript.
			-> function calls can be used within larger expressions.

	[Control Flow]
		- statements are executed from top to bottom.

	[Conditional Execution]
		- "if" keyword

	[While and Do Loops]
		- "do loop" always executes its body at least once, and it starts testing whether it should stop only after that irst execution.

			ex)
				========================================
				let yourName;
				do {
					yourName = prompt("Who are you?");
				} while (!yourName)
				console.log(yourName)
				========================================
				+ forces you to enter a name.

	[For Loops]
		- must contain two semicolons.
			1) first part initializes the loop (by defining a binding)
			2) second part is the expression that "checks" whether the loop must continue.
			3) final part "updates" the state of the loop after every iteration.

	[Breaking Out of a Loop]
		- break -> stops the loop.
		- continue -> jumps out of the body and continues with the loop's next iteration.

	[Dispatching on a value with Switch]
		- be careful - it is easy to forget "break", which will cause the program to execute code you do not want executed.

	[Capitalization]
		- (//) two slash characters
			-> single-line comment

		- (/* */)
			-> used for adding blocks of information about a file or a chunk of a program.

	[Exercises]
		1) Looping a Triangle
			============================================================
			let output = ''
			for(let i=0; i<7; i++){
			    for(let j=0; j<=i; j++){
			        output += '#'
			    }
			    console.log(output)
			    output=''
			}

			// Output
			#
			##
			###
			####
			#####
			######
			#######
			============================================================

		2) FizzBuzz
			============================================================
			for(let i=1; i<=100; i++){
			    if(i%3===0){
			        console.log("Fizz")
			    }else if(i%5===0){
			        console.log("Buzz")
			    }else{
			        console.log(i)    
			    }
			}

			// Output
			1
			2
			Fizz
			4
			Buzz
			Fizz
			7
			8
			Fizz
			Buzz
			11
			Fizz
			13
			14
			Fizz
			16
			17
			Fizz
			19
			Buzz
			Fizz
			22
			23
			Fizz
			Buzz
			26
			Fizz
			28
			29
			Fizz
			31
			32
			Fizz
			34
			Buzz
			Fizz
			37
			38
			Fizz
			Buzz
			41
			Fizz
			43
			44
			Fizz
			46
			47
			Fizz
			49
			Buzz
			Fizz
			52
			53
			Fizz
			Buzz
			56
			Fizz
			58
			59
			Fizz
			61
			62
			Fizz
			64
			Buzz
			Fizz
			67
			68
			Fizz
			Buzz
			71
			Fizz
			73
			74
			Fizz
			76
			77
			Fizz
			79
			Buzz
			Fizz
			82
			83
			Fizz
			Buzz
			86
			Fizz
			88
			89
			Fizz
			91
			92
			Fizz
			94
			Buzz
			Fizz
			97
			98
			Fizz
			Buzz
			============================================================

		3) Chessboard
			============================================================
			let size = 8
			for(let i=0; i<size; i++){
			    let output = ''
			    for(let j=0; j<size; j++){
			        if(i%2===0){
			            if(j%2===0){
			                output += ' '
			            }else{
			                output += '#'
			            }    
			        }else {
			            if(j%2===0){
			                output += '#'
			            }else{
			                output += ' '
			            }    
			        }
			    }   
			    console.log(output)
			}

			// Output
			 # # # #
			# # # # 
			 # # # #
			# # # # 
			 # # # #
			# # # # 
			 # # # #
			# # # # 
			============================================================




