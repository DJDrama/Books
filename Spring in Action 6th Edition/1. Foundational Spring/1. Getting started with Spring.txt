1.1 What is Spring?
	- Spring offers a container, often referred to as the Spring application context, that creates and manages application components.
	- These components, or beans, are wired together inside the Spring application context to make a complete application, much like bricks, mortar, timber, nails, plumbing, and wiring are bound together to make a house.
	- Act of wiring beans together is based on a pattern known as dependency injection(DI).
	- a dependency-injected app relies on a separate entity(the container) to create and maintain all components and inject those into the beans that need them.
	- This is done through constructor arguments or property accessor methods.

	[Spring application context]
		- Inventory service ---- injected into -----> Product service
		- Application components are managed and injected into each other by the Spring application context.

	- @Configuration annotation: indicates to Spring that this is a configuration class that will provide beans to the Spring application context.
	- The configuration's methods are annotated with @Bean, indiicating that the objects they return should be added as beans in the application context (where, by default, their respective bean IDs will be the same as the names of the methods that define them).

	- Java-based configuration offers several benefits over XML-based configuration, including greater type safety and improved refactorability.
	- Explicit configuration with either JAVA or XML is needed when Spring is unable to automatically configure the components.
	- Autowiring, Component Scanning : Automatic configuration has its roots in the Spring techinques known as
		1) With Component Scanning, Spring can automatically discover components from an app's classpath and create them as beans in the Spring app context.
		2) With autowiring, Spring automatically injects the components with the other beans that they depend on.

	- With the introduction of Spring Boot, automatic configuration has gone well beyond component scanning and autowiring.
	- Spring Boot is an extension of the Spring Framework that offers several productivity enhancements.
	- Autoconfiguration: Spring Boot can make reasonable guesses at what components need to be configured and wired together, based on entries in the classpath, environment variables, and other factors.

	- Spring Boot autoconfiguration has dramatically reduced the amount of explicit configuration (whether with XML or Java) required to build an app.
	- Spring Boot enhances Spring development so much that it's hard to imagine developing Spring apps without it.
	- Spring XML configuration is the old-school way of working with Spring.

1.2 Initializing a Spring application
	1.2.1 Initializing a Spring project with Spring Tool Suite
	1.2.2 Examining the Spring project structure
		- mvnw, mvnw.cmd : Maven wrapper scripts. You can use these scripts to build your project.
		- pom.xml: Maven build specification.
		- application.properties: offers a place where you can specify configuration properties.
		- static: folder where you can place any static content (images, stylesheets, JavaScript, and so forth) that you want to serve to the browser.
		- templates: place template files that will be used to render content to the browser. Mostly add a Thymeleaf template.

		- "starter" word in dependency benefits
			1) build file will be significantly smaller and easier to manage because won't need to declare a dependency on every library you might need.
			2) able to think of your dependencies in terms of what capabilities they provide, rather than their library names. (If you're developing a web application, just add the web starter dependency rather than a laundry list of individual libraries that enable you to write a web app)
			3) freed from the burden of worrying about library versions. You can trust that the versions of the libraries brought in transitively will be compatible for a given version of Spring Boot. You need to worry only about which version of Spring Boot you're using.

		- the build specification ends with the Spring Boot plugin. This plugin performs a few important functions, described next:
			1) provides a Maven goal that enables you to run the app using Maven.
			2) ensures that all dependency libraries are included within the executable JAR file and available on the runtime classpath.
			3) produces a manifest file in the JAR file that denotes the bootstrap calss as the main class for the executable JAR.

		- @SpringBootApplication: clearly signifies that this is a Spring Boot application.
		- @EnableAutoConfiguration: Enables Spring Boot automatic configuration.
		- @ComponentScan: Enables component scanning. This lets you declare other classes with annotations like @Component, @Controller, and @Service to have Spring automatically discover and register them as components in the Spring app context.


		- main() method in Application: method that will be run when the JAR file is executed. For the most part, this method is boilerplate code.
		- main() method: calls a static run() method on the SpringApplication class, which performs the actual bootstrapping of the application, creating the Spring application context.
			ex) SpringApplication.run(MyApplication.class, args);
				-> two parameters passed to the run() method
					1) configuration class
					2) command-line arguments.

		[TESTING THE APPLICATION]
			- you can test your project manually by building it and then running it from the command line like this:
				$ ./mvnw package
				...
				$ java -jar target/taco-cloud-0.0.1-SNAPSHOT.jar

				OR

				4 ./mvnw spring-boot:run

			- @SpringBootTest annotation: tells JUnit to bootstrap the test with Spring Boot capabilities.
			- @SpringBootTest is a composite annotation, which is itself annotated with @ExtendWith(SpringExtension.class), to add Spring testing capabilities to JUnit 5.

			- To run any test classes from the command line, you can use the following Maven incantation:
				$ ./mvnw test
		
1.3 Writing a Spring application
	1.3.1 Handling web requests
		- Spring MVC is the conecpt of a controller, a class that handles requests and responds with information of some sort.
		- In the case of a browser-facing app, a controller responds by optionally populating model data and passing the request on to a view to produce HTML that's returned to the browser.

		- @Controller: primary purpose is to identify this class as a component for component scanning.
		- Spring's component scanning automatically discovers it and creates an instance of XXXXController as a bean in the Spring application context.

	1.3.2 Defining the view
		- static content, such as images, is kept in the /src/main/resource/static folder.
		- image must also reside within the project at /src/main/resources/static/images/XXXX.png

	1.3.3 Testing the controller

	1.3.4 Building and running the application
	1.3.5 Getting to know Spring Boot DevTools
		- DevTools provides Spring developers with some handy development-time tools
			1) Automatic application restart when code changes
			2) Automatic browser refresh when browser-destined resources (such as templates, JavaScript, stylesheets, and so on) change
			3) Automatic disabling of template caches
			4) Built in H2 Console, if the H2 database is in use

		* DevTools isn't an IDE plugin, nor does it require that you use a spcific IDE.

		[AUTOMATIC APPLICATION RESTART]
			- with DevTools as part of your project, you'll be able to make changes to Java code and properties files in the project and see those changes applied after a brief moment.
			- When DevTools is active, the app is loaded into two separate class loaders in the Java virtual Machine(JVM)
				1) One class loader is loaded with your Java code, property files, and pretty much anything that's in the src/main/ path of the project. (These are items that are likely to change frequently)
				2) The other class loader is loaded with dependenc libraries, which aren't likely to change as often.

			- When a change is detected, DevTools reloads only the class loader containing your project code and restarts the Spring application context but leaves the other class loader and the JVM intact.

			* Downside : changes to depdencies won't be available in automatic restarts. 
				-> the class loader containing dependency libraries isn't automatically reloaded.
				-> Any time, you add, change, or remove a dependency in your build specification, you'll need to do a hard restart of the application for those changes to take effect.

		[AUTOMATIC BROWSER REFRESH AND TEMPLATE CACHE DISABLE]
			- Thymeleaf and FreeMarker are configured to cache the results of template parsing so that templates don't need to reparsed with every request they servve.
			- Even if you've made changes in development time, the cached template will still be in use until you restart the app.

		[BUILT-IN H2 CONSOLE]
			- If you choose to use the H2 database for development, DevTools will also automatically enable an H2 console that you can access from your web browser.

	1.3.6 Let's review

1.4 Surveying the Spring landscape
	1.4.1 The core Spring Framework
		- It provides the core container and dependency injection framework.
		- Spring MVC can also be used to create REST APIs that produce non-HTML output.
		- also offers some elemental data persistence support, specifically, template-based JDBC support.
		- Spring includes support for reacive-style programming, including a new reactive web framework called Spring WebFlux that borrows heavily from Spring MVC.

	1.4.2 Spring Boot
		- Benefits
			1) The Actuator provides runtime insight into the inner workings of an app, including metrics, thread dump info, app health, and environment properties available to the app
			2) Flexible specification of environment properties
			3) Additional testing support on top of the testing assistance found in the core framework.
			4) offers an alternative programming model based on Groovy scripts that's called the Spring Boot CLI.

	1.4.3 Spring Data

	1.4.4 Spring Security
		- addresses a board range of app security needs, including authentication, authorization, and API security.

	1.4.5 Spring Integration and Spring Batch
		- provides the implementation of these patterns for Spring apps.

	1.4.6 Spring Cloud
		- look at Cloud Native Spring in Action by Thomas Vitale

	1.4.7 Spring Native
		- GraalVM native-image compiler, resulting in images that start significantly faster and have a lighter footprint.































































